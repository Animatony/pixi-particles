{"version":3,"sources":["../src/PropertyNode.ts","../src/ParticleUtils.ts","../src/PropertyList.ts","../src/Particle.ts","../src/Emitter.ts","../src/PolygonalChain.ts","../src/PathParticle.ts","../src/AnimatedParticle.ts"],"names":["PropertyNode","value","time","ease","this","ParticleUtils","hexToRGB","next","isStepped","generateEase","createList","data","Array","isArray","list","array","node","first","length","i","start","end","verbose","DEG_TO_RADS","Math","PI","rotatePoint","angle","p","s","sin","c","cos","xnew","x","y","ynew","combineRGBComponents","r","g","b","normalize","point","oneOverLen","scaleBy","sqrt","color","output","alpha","charAt","substr","indexOf","parseInt","a","segments","qty","oneOverQty","t","cp","e","getBlendMode","name","BLEND_MODES","NORMAL","toUpperCase","replace","createSteppedGradient","numSteps","currentNode","current","nextIndex","lerp","curVal","nextVal","PropertyList","isColor","interpolate","prototype","reset","intColorSimple","intValueSimple","intColorStepped","intValueStepped","intColorComplex","intValueComplex","ticker","Particle","_super","emitter","_this","call","anchor","velocity","Point","maxLife","age","extraData","alphaList","speedList","speedMultiplier","acceleration","maxSpeed","NaN","scaleList","scaleMultiplier","colorList","_doAlpha","_doScale","_doSpeed","_doAcceleration","_doColor","_doNormalMovement","_oneOverLife","prev","init","Particle_init","update","Particle_update","Sprite_destroy","destroy","Particle_destroy","applyArt","kill","tslib_1.__extends","rotation","noRotation","rotationSpeed","scale","tint","visible","art","texture","Texture","EMPTY","delta","speed","currentSpeed","position","atan2","recycle","parent","removeChild","parseArt","fromImage","baseTexture","window","console","warn","parseData","Sprite","PolygonalChain","countingLengths","totalLength","chain","prevPoint","j","second","push","p1","p2","l","_a","segLength","getRandomPoint","out","chosenSeg","rand","random","pixiNS","pixi","exec","pixi.VERSION","shared","Ticker","helperPoint","Emitter","particleParent","particleImages","config","_particleConstructor","startAlpha","startSpeed","minimumSpeedMultiplier","startScale","minimumScaleMultiplier","startColor","minLifetime","maxLifetime","minStartRotation","maxStartRotation","minRotationSpeed","maxRotationSpeed","particleBlendMode","customEase","_frequency","spawnChance","maxParticles","emitterLifetime","spawnPos","spawnType","_spawnFunc","spawnRect","spawnCircle","spawnPolygonalChain","particlesPerWave","particleSpacing","angleStart","ownerPos","_prevEmitterPos","_prevPosIsValid","_posChanged","_parent","addAtBack","particleCount","_emit","_spawnTimer","_emitterLife","_activeParticlesFirst","_activeParticlesLast","_poolFirst","_origConfig","_origArt","_autoUpdate","_destroyWhenComplete","_completeCallback","rotate","updateSpawnPos","updateOwnerPos","Object","defineProperty","cleanup","particle","slice","partClass","startRotation","min","max","lifetime","blendMode","_spawnRect","Rectangle","w","h","_spawnCircle","Circle","_spawnRing","minRadius","minR","_spawnBurst","_spawnPoint","_spawnPolygonalChain","spawnPolygon","frequency","pos","clone","emit","undefined","autoUpdate","newRot","diff","resetPositionTracking","remove","add","playOnceAndDestroy","callback","playOnce","settings","TARGET_FPMS","prevX","prevY","curX","curY","emitPosX","emitPosY","len","particleConstructor","floor","children","shift","pop","index","splice","unshift","addChildAt","addChild","width","height","radius","MATH_FUNCS","WHITELISTER","RegExp","concat","join","PathParticle","path","initialRotation","initialPosition","movement","pathString","matches","match","Function","parsePath","error","AnimatedParticle","textures","duration","framerate","elapsed","loop","frame","tex","outTextures","outArr","dupe","count"],"mappings":"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","file":"dist/pixi-particles.min.js.map","sourcesContent":["import {ParticleUtils, EaseSegment, SimpleEase} from \"./ParticleUtils\";\n\nexport interface ValueStep {\n\tvalue:number|string;\n\ttime:number;\n}\n\nexport interface ValueList {\n\tlist: ValueStep[],\n\tisStepped?: boolean;\n\tease?: SimpleEase|EaseSegment[];\n}\n/**\n * A single node in a PropertyList.\n */\nexport class PropertyNode<V>\n{\n\t/**\n\t * Value for the node.\n\t */\n\tpublic value: V;\n\t/**\n\t * Time value for the node. Between 0-1.\n\t */\n\tpublic time: number;\n\t/**\n\t * The next node in line.\n\t */\n\tpublic next: PropertyNode<V>;\n\t/**\n\t * If this is the first node in the list, controls if the entire list is stepped or not.\n\t */\n\tpublic isStepped: boolean;\n\tpublic ease: SimpleEase;\n\t\n\t/**\n\t * @param value The value for this node\n\t * @param time The time for this node, between 0-1\n\t * @param [ease] Custom ease for this list. Only relevant for the first node.\n\t */\n\tconstructor(value: V|string, time:number, ease?: SimpleEase|EaseSegment[])\n\t{\n\t\tthis.value = typeof value == \"string\" ? ParticleUtils.hexToRGB(value) as any : value;\n\t\tthis.time = time;\n\t\tthis.next = null;\n\t\tthis.isStepped = false;\n\t\tif (ease)\n\t\t{\n\t\t\tthis.ease = typeof ease == \"function\" ? ease : ParticleUtils.generateEase(ease);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.ease = null;\n\t\t}\n\t}\n\n\t/**\n\t * Creates a list of property values from a data object {list, isStepped} with a list of objects in\n\t * the form {value, time}. Alternatively, the data object can be in the deprecated form of\n\t * {start, end}.\n\t * @param data The data for the list.\n\t * @param data.list The array of value and time objects.\n\t * @param data.isStepped If the list is stepped rather than interpolated.\n\t * @param data.ease Custom ease for this list.\n\t * @return The first node in the list\n\t */\n\tpublic static createList(data: ValueList):PropertyNode<any>\n\t{\n\t\tif (Array.isArray(data.list))\n\t\t{\n\t\t\tlet array = data.list;\n\t\t\tlet node, first;\n\t\t\tfirst = node = new PropertyNode(array[0].value, array[0].time, data.ease);\n\t\t\t//only set up subsequent nodes if there are a bunch or the 2nd one is different from the first\n\t\t\tif (array.length > 2 || (array.length === 2 && array[1].value !== array[0].value))\n\t\t\t{\n\t\t\t\tfor (let i = 1; i < array.length; ++i)\n\t\t\t\t{\n\t\t\t\t\tnode.next = new PropertyNode(array[i].value, array[i].time);\n\t\t\t\t\tnode = node.next;\n\t\t\t\t}\n\t\t\t}\n\t\t\tfirst.isStepped = !!data.isStepped;\n\t\t\treturn first;\n\t\t}\n\t\telse\n\t\t{\n\t\t\t//Handle deprecated version here\n\t\t\tlet start = new PropertyNode((data as any).start, 0);\n\t\t\t//only set up a next value if it is different from the starting value\n\t\t\tif ((data as any).end !== (data as any).start)\n\t\t\t\tstart.next = new PropertyNode((data as any).end, 1);\n\t\t\treturn start;\n\t\t}\n\t}\n}","import {BLEND_MODES, Point} from 'pixi.js';\nimport {PropertyNode, ValueStep} from './PropertyNode';\n\nexport interface Color {\n\tr: number,\n\tg: number,\n\tb: number,\n\ta?: number\n}\n\nexport interface EaseSegment {\n\tcp:number;\n\ts:number;\n\te:number;\n}\n\nexport type SimpleEase = (time:number) => number;\n\n/**\n * Contains helper functions for particles and emitters to use.\n */\nexport namespace ParticleUtils {\n\t/**\n\t * If errors and warnings should be logged within the library.\n\t */\n\texport let verbose = false;\n\n\texport const DEG_TO_RADS = Math.PI / 180;\n\n\t/**\n\t * Rotates a point by a given angle.\n\t * @param angle The angle to rotate by in degrees\n\t * @param p The point to rotate around 0,0.\n\t */\n\texport function rotatePoint(angle:number, p:Point)\n\t{\n\t\tif (!angle) return;\n\t\tangle *= ParticleUtils.DEG_TO_RADS;\n\t\tconst s = Math.sin(angle);\n\t\tconst c = Math.cos(angle);\n\t\tconst xnew = p.x * c - p.y * s;\n\t\tconst ynew = p.x * s + p.y * c;\n\t\tp.x = xnew;\n\t\tp.y = ynew;\n\t}\n\n\t/**\n\t * Combines separate color components (0-255) into a single uint color.\n\t * @param r The red value of the color\n\t * @param g The green value of the color\n\t * @param b The blue value of the color\n\t * @return The color in the form of 0xRRGGBB\n\t */\n\texport function combineRGBComponents(r:number, g:number, b:number/*, a*/): number\n\t{\n\t\treturn /*a << 24 |*/ r << 16 | g << 8 | b;\n\t}\n\n\t/**\n\t * Reduces the point to a length of 1.\n\t * @param point The point to normalize\n\t */\n\texport function normalize(point:Point): void\n\t{\n\t\tlet oneOverLen = 1 / ParticleUtils.length(point);\n\t\tpoint.x *= oneOverLen;\n\t\tpoint.y *= oneOverLen;\n\t}\n\n\t/**\n\t * Multiplies the x and y values of this point by a value.\n\t * @param point The point to scaleBy\n\t * @param value The value to scale by.\n\t */\n\texport function scaleBy(point:Point, value:number): void\n\t{\n\t\tpoint.x *= value;\n\t\tpoint.y *= value;\n\t}\n\n\t/**\n\t * Returns the length (or magnitude) of this point.\n\t * @param point The point to measure length\n\t * @return The length of this point.\n\t */\n\texport function length(point:Point): number\n\t{\n\t\treturn Math.sqrt(point.x * point.x + point.y * point.y);\n\t}\n\n\t/**\n\t * Converts a hex string from \"#AARRGGBB\", \"#RRGGBB\", \"0xAARRGGBB\", \"0xRRGGBB\",\n\t * \"AARRGGBB\", or \"RRGGBB\" to an object of ints of 0-255, as\n\t * {r, g, b, (a)}.\n\t * @param color The input color string.\n\t * @param output An object to put the output in. If omitted, a new object is created.\n\t * @return The object with r, g, and b properties, possibly with an a property.\n\t */\n\texport function hexToRGB(color:string, output?:Color): Color\n\t{\n\t\tif (!output)\n\t\t\toutput = {} as Color;\n\t\tif (color.charAt(0) == \"#\")\n\t\t\tcolor = color.substr(1);\n\t\telse if (color.indexOf(\"0x\") === 0)\n\t\t\tcolor = color.substr(2);\n\t\tlet alpha;\n\t\tif (color.length == 8)\n\t\t{\n\t\t\talpha = color.substr(0, 2);\n\t\t\tcolor = color.substr(2);\n\t\t}\n\t\toutput.r = parseInt(color.substr(0, 2), 16);//Red\n\t\toutput.g = parseInt(color.substr(2, 2), 16);//Green\n\t\toutput.b = parseInt(color.substr(4, 2), 16);//Blue\n\t\tif (alpha)\n\t\t\toutput.a = parseInt(alpha, 16);\n\t\treturn output;\n\t}\n\n\t/**\n\t * Generates a custom ease function, based on the GreenSock custom ease, as demonstrated\n\t * by the related tool at http://www.greensock.com/customease/.\n\t * @param segments An array of segments, as created by\n\t * http://www.greensock.com/customease/.\n\t * @return A function that calculates the percentage of change at\n\t *                    a given point in time (0-1 inclusive).\n\t */\n\texport function generateEase(segments:EaseSegment[]): SimpleEase\n\t{\n\t\tconst qty = segments.length;\n\t\tconst oneOverQty = 1 / qty;\n\t\t/*\n\t\t * Calculates the percentage of change at a given point in time (0-1 inclusive).\n\t\t * @param {Number} time The time of the ease, 0-1 inclusive.\n\t\t * @return {Number} The percentage of the change, 0-1 inclusive (unless your\n\t\t *                  ease goes outside those bounds).\n\t\t */\n\t\treturn function(time:number)\n\t\t{\n\t\t\tlet t: number, s: EaseSegment;\n\t\t\tlet i = (qty * time) | 0;//do a quick floor operation\n\t\t\tt = (time - (i * oneOverQty)) * qty;\n\t\t\ts = segments[i] || segments[qty - 1];\n\t\t\treturn (s.s + t * (2 * (1 - t) * (s.cp - s.s) + t * (s.e - s.s)));\n\t\t};\n\t}\n\n\t/**\n\t * Gets a blend mode, ensuring that it is valid.\n\t * @param name The name of the blend mode to get.\n\t * @return The blend mode as specified in the PIXI.BLEND_MODES enumeration.\n\t */\n\texport function getBlendMode(name:string): number\n\t{\n\t\tif (!name) return BLEND_MODES.NORMAL;\n\t\tname = name.toUpperCase();\n\t\twhile (name.indexOf(\" \") >= 0)\n\t\t\tname = name.replace(\" \", \"_\");\n\t\treturn (BLEND_MODES as any)[name] || BLEND_MODES.NORMAL;\n\t}\n\n\t/**\n\t * Converts a list of {value, time} objects starting at time 0 and ending at time 1 into an evenly\n\t * spaced stepped list of PropertyNodes for color values. This is primarily to handle conversion of\n\t * linear gradients to fewer colors, allowing for some optimization for Canvas2d fallbacks.\n\t * @param list The list of data to convert.\n\t * @param [numSteps=10] The number of steps to use.\n\t * @return The blend mode as specified in the PIXI.blendModes enumeration.\n\t */\n\texport function createSteppedGradient(list:ValueStep[], numSteps:number = 10) {\n\t\tif (typeof numSteps !== 'number' || numSteps <= 0)\n\t\t\tnumSteps = 10;\n\t\tlet first = new PropertyNode<Color>(list[0].value as string, list[0].time);\n\t\tfirst.isStepped = true;\n\t\tlet currentNode = first;\n\t\tlet current = list[0];\n\t\tlet nextIndex = 1;\n\t\tlet next = list[nextIndex];\n\t\tfor (let i = 1; i < numSteps; ++i)\n\t\t{\n\t\t\tlet lerp = i / numSteps;\n\t\t\t//ensure we are on the right segment, if multiple\n\t\t\twhile (lerp > next.time)\n\t\t\t{\n\t\t\t\tcurrent = next;\n\t\t\t\tnext = list[++nextIndex];\n\t\t\t}\n\t\t\t//convert the lerp value to the segment range\n\t\t\tlerp = (lerp - current.time) / (next.time - current.time);\n\t\t\tlet curVal = ParticleUtils.hexToRGB(current.value as string);\n\t\t\tlet nextVal = ParticleUtils.hexToRGB(next.value as string);\n\t\t\tlet output:Color = {} as Color;\n\t\t\toutput.r = (nextVal.r - curVal.r) * lerp + curVal.r;\n\t\t\toutput.g = (nextVal.g - curVal.g) * lerp + curVal.g;\n\t\t\toutput.b = (nextVal.b - curVal.b) * lerp + curVal.b;\n\t\t\tcurrentNode.next = new PropertyNode(output, i / numSteps);\n\t\t\tcurrentNode = currentNode.next;\n\t\t}\n\t\t//we don't need to have a PropertyNode for time of 1, because in a stepped version at that point\n\t\t//the particle has died of old age\n\t\treturn first;\n\t}\n}","import {ParticleUtils, SimpleEase, Color} from \"./ParticleUtils\";\nimport {PropertyNode} from \"./PropertyNode\";\n\n/**\n * Singly linked list container for keeping track of interpolated properties for particles.\n * Each Particle will have one of these for each interpolated property.\n */\nexport class PropertyList<V>\n{\n\t/**\n\t * The current property node in the linked list.\n\t */\n\tpublic current: PropertyNode<V>;\n\t/**\n\t * The next property node in the linked list. Stored separately for slightly less variable\n\t * access.\n\t */\n\tpublic next: PropertyNode<V>;\n\t/**\n\t * Calculates the correct value for the current interpolation value. This method is set in\n\t * the reset() method.\n\t * @param lerp The interpolation value from 0-1.\n\t * @return The interpolated value. Colors are converted to the hex value.\n\t */\n\tpublic interpolate: (lerp:number)=>number;\n\t/**\n\t * A custom easing method for this list.\n\t * @param lerp The interpolation value from 0-1.\n\t * @return The eased value, also from 0-1.\n\t */\n\tpublic ease: SimpleEase;\n\t/**\n\t * If this list manages colors, which requires a different method for interpolation.\n\t */\n\tprivate isColor: boolean;\n\t\n    /**\n     * @param isColor If this list handles color values\n     */\n\tconstructor(isColor: boolean = false)\n\t{\n\t\tthis.current = null;\n\t\tthis.next = null;\n\t\tthis.isColor = !!isColor;\n\t\tthis.interpolate = null;\n\t\tthis.ease = null;\n\t}\n\n\t/**\n\t * Resets the list for use.\n\t * @param first The first node in the list.\n\t * @param first.isStepped If the values should be stepped instead of interpolated linearly.\n\t */\n\tpublic reset(first: PropertyNode<V>)\n\t{\n\t\tthis.current = first;\n\t\tthis.next = first.next;\n\t\tconst isSimple = this.next && this.next.time >= 1;\n\t\tif (isSimple)\n\t\t{\n\t\t\tthis.interpolate = this.isColor ? intColorSimple : intValueSimple;\n\t\t}\n\t\telse if (first.isStepped)\n\t\t{\n\t\t\tthis.interpolate = this.isColor ? intColorStepped : intValueStepped;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.interpolate = this.isColor ? intColorComplex : intValueComplex;\n\t\t}\n\t\tthis.ease = this.current.ease;\n\t}\n}\n\nfunction intValueSimple(this: PropertyList<number>, lerp: number)\n{\n\tif (this.ease)\n\t\tlerp = this.ease(lerp);\n\treturn (this.next.value - this.current.value) * lerp + this.current.value;\n}\n\nfunction intColorSimple(this: PropertyList<Color>, lerp: number)\n{\n\tif (this.ease)\n\t\tlerp = this.ease(lerp);\n\tlet curVal = this.current.value, nextVal = this.next.value;\n\tlet r = (nextVal.r - curVal.r) * lerp + curVal.r;\n\tlet g = (nextVal.g - curVal.g) * lerp + curVal.g;\n\tlet b = (nextVal.b - curVal.b) * lerp + curVal.b;\n\treturn ParticleUtils.combineRGBComponents(r, g, b);\n}\n\nfunction intValueComplex(this: PropertyList<number>, lerp: number)\n{\n\tif (this.ease)\n\t\tlerp = this.ease(lerp);\n\t//make sure we are on the right segment\n\twhile (lerp > this.next.time)\n\t{\n\t\tthis.current = this.next;\n\t\tthis.next = this.next.next;\n\t}\n\t//convert the lerp value to the segment range\n\tlerp = (lerp - this.current.time) / (this.next.time - this.current.time);\n\treturn (this.next.value - this.current.value) * lerp + this.current.value;\n}\n\nfunction intColorComplex(this: PropertyList<Color>, lerp: number)\n{\n\tif (this.ease)\n\t\tlerp = this.ease(lerp);\n\t//make sure we are on the right segment\n\twhile (lerp > this.next.time)\n\t{\n\t\tthis.current = this.next;\n\t\tthis.next = this.next.next;\n\t}\n\t//convert the lerp value to the segment range\n\tlerp = (lerp - this.current.time) / (this.next.time - this.current.time);\n\tlet curVal = this.current.value, nextVal = this.next.value;\n\tlet r = (nextVal.r - curVal.r) * lerp + curVal.r;\n\tlet g = (nextVal.g - curVal.g) * lerp + curVal.g;\n\tlet b = (nextVal.b - curVal.b) * lerp + curVal.b;\n\treturn ParticleUtils.combineRGBComponents(r, g, b);\n}\n\nfunction intValueStepped(this: PropertyList<number>, lerp: number)\n{\n\tif (this.ease)\n\t\tlerp = this.ease(lerp);\n\t//make sure we are on the right segment\n\twhile (this.next && lerp > this.next.time)\n\t{\n\t\tthis.current = this.next;\n\t\tthis.next = this.next.next;\n\t}\n\treturn this.current.value;\n}\n\nfunction intColorStepped(this: PropertyList<Color>, lerp: number)\n{\n\tif (this.ease)\n\t\tlerp = this.ease(lerp);\n\t//make sure we are on the right segment\n\twhile (this.next && lerp > this.next.time)\n\t{\n\t\tthis.current = this.next;\n\t\tthis.next = this.next.next;\n\t}\n\tlet curVal = this.current.value;\n\treturn ParticleUtils.combineRGBComponents(curVal.r, curVal.g, curVal.b);\n}","import {Emitter} from \"./Emitter\";\nimport {ParticleUtils, SimpleEase, Color} from \"./ParticleUtils\";\nimport {PropertyList} from \"./PropertyList\";\nimport {Sprite, Point, Texture} from 'pixi.js';\n\n/**\n * An individual particle image. You shouldn't have to deal with these.\n */\nexport class Particle extends Sprite\n{\n\t/**\n\t * The emitter that controls this particle.\n\t */\n\tpublic emitter: Emitter;\n\t/**\n\t * The velocity of the particle. Speed may change, but the angle also\n\t * contained in velocity is constant.\n\t */\n\tpublic velocity: Point;\n\t/**\n\t * The maximum lifetime of this particle, in seconds.\n\t */\n\tpublic maxLife: number;\n\t/**\n\t * The current age of the particle, in seconds.\n\t */\n\tpublic age: number;\n\t/**\n\t * A simple easing function to be applied to all properties that\n\t * are being interpolated.\n\t */\n\tpublic ease: SimpleEase;\n\t/**\n\t * Extra data that the emitter passes along for custom particles.\n\t */\n\tpublic extraData: any;\n\t/**\n\t * The alpha of the particle throughout its life.\n\t */\n\tpublic alphaList: PropertyList<number>;\n\t/**\n\t * The speed of the particle throughout its life.\n\t */\n\tpublic speedList: PropertyList<number>;\n\t/**\n\t * A multiplier from 0-1 applied to the speed of the particle at all times.\n\t */\n\tpublic speedMultiplier: number;\n\t/**\n\t * Acceleration to apply to the particle.\n\t */\n\tpublic acceleration: Point;\n\t/**\n\t * The maximum speed allowed for accelerating particles. Negative values, values of 0 or NaN\n\t * will disable the maximum speed.\n\t */\n\tpublic maxSpeed: number;\n\t/**\n\t * Speed at which the particle rotates, in radians per second.\n\t */\n\tpublic rotationSpeed: number;\n\t/**\n\t * If particle rotation is locked, preventing rotation from occurring due\n\t * to directional changes.\n\t */\n\tpublic noRotation: boolean;\n\t/**\n\t * The scale of the particle throughout its life.\n\t */\n\tpublic scaleList: PropertyList<number>;\n\t/**\n\t * A multiplier from 0-1 applied to the scale of the particle at all times.\n\t */\n\tpublic scaleMultiplier: number;\n\t/**\n\t * The tint of the particle throughout its life.\n\t */\n\tpublic colorList: PropertyList<Color>;\n\t/**\n\t * A reference to init, so that subclasses can access it without the penalty of Function.call()\n\t */\n\tprotected Particle_init: typeof Particle.prototype.init;\n\t/**\n\t * A reference to update so that subclasses can access the original without the overhead\n\t * of Function.call().\n\t * @param delta Time elapsed since the previous frame, in __seconds__.\n\t * @return The standard interpolation multiplier (0-1) used for all relevant particle\n\t *                   properties. A value of -1 means the particle died of old age instead.\n\t */\n\tprotected Particle_update: typeof Particle.prototype.update;\n\tprotected Particle_destroy: typeof Particle.prototype.destroy;\n\tprotected Sprite_destroy: typeof Sprite.prototype.destroy;\n\t/**\n\t * If alpha should be interpolated at all.\n\t */\n\tprotected _doAlpha: boolean;\n\t/**\n\t * If scale should be interpolated at all.\n\t */\n\tprotected _doScale: boolean;\n\t/**\n\t * If speed should be interpolated at all.\n\t */\n\tprotected _doSpeed: boolean;\n\t/**\n\t * If acceleration should be handled at all. _doSpeed is mutually exclusive with this,\n\t * and _doSpeed gets priority.\n\t */\n\tprotected _doAcceleration: boolean;\n\t/**\n\t * If color should be interpolated at all.\n\t */\n\tprotected _doColor: boolean;\n\t/**\n\t * If normal movement should be handled. Subclasses wishing to override movement\n\t * can set this to false in init().\n\t */\n\tprotected _doNormalMovement: boolean;\n\t/**\n\t * One divided by the max life of the particle, saved for slightly faster math.\n\t */\n\tprivate _oneOverLife: number;\n\t/**\n\t * Reference to the next particle in the list.\n\t */\n\tpublic next: Particle;\n\n\t/**\n\t * Reference to the previous particle in the list.\n\t */\n\tpublic prev: Particle;\n\t\n\t/**\n\t * @param {PIXI.particles.Emitter} emitter The emitter that controls this particle.\n\t */\n\tconstructor(emitter: Emitter)\n\t{\n\t\t//start off the sprite with a blank texture, since we are going to replace it\n\t\t//later when the particle is initialized.\n\t\tsuper();\n\t\tthis.emitter = emitter;\n\t\t//particles should be centered\n\t\tthis.anchor.x = this.anchor.y = 0.5;\n\t\tthis.velocity = new Point();\n\t\tthis.maxLife = 0;\n\t\tthis.age = 0;\n\t\tthis.ease = null;\n\t\tthis.extraData = null;\n\t\tthis.alphaList = new PropertyList();\n\t\tthis.speedList = new PropertyList();\n\t\tthis.speedMultiplier = 1;\n\t\tthis.acceleration = new Point();\n\t\tthis.maxSpeed = NaN;\n\t\tthis.scaleList = new PropertyList();\n\t\tthis.scaleMultiplier = 1;\n\t\tthis.colorList = new PropertyList(true);\n\t\tthis._doAlpha = false;\n\t\tthis._doScale = false;\n\t\tthis._doSpeed = false;\n\t\tthis._doAcceleration = false;\n\t\tthis._doColor = false;\n\t\tthis._doNormalMovement = false;\n\t\tthis._oneOverLife = 0;\n\t\tthis.next = null;\n\t\tthis.prev = null;\n\n\t\t//save often used functions on the instance instead of the prototype for better speed\n\t\tthis.init = this.init;\n\t\tthis.Particle_init = Particle.prototype.init;\n\t\tthis.update = this.update;\n\t\tthis.Particle_update = Particle.prototype.update;\n\t\tthis.Sprite_destroy = super.destroy;\n\t\tthis.Particle_destroy = Particle.prototype.destroy;\n\t\tthis.applyArt = this.applyArt;\n\t\tthis.kill = this.kill;\n\t}\n\n\t/**\n\t * Initializes the particle for use, based on the properties that have to\n\t * have been set already on the particle.\n\t */\n\tpublic init()\n\t{\n\t\t//reset the age\n\t\tthis.age = 0;\n\t\t//set up the velocity based on the start speed and rotation\n\t\tthis.velocity.x = this.speedList.current.value * this.speedMultiplier;\n\t\tthis.velocity.y = 0;\n\t\tParticleUtils.rotatePoint(this.rotation, this.velocity);\n\t\tif (this.noRotation)\n\t\t{\n\t\t\tthis.rotation = 0;\n\t\t}\n\t\telse\n\t\t{\n\t\t\t//convert rotation to Radians from Degrees\n\t\t\tthis.rotation *= ParticleUtils.DEG_TO_RADS;\n\t\t}\n\t\t//convert rotation speed to Radians from Degrees\n\t\tthis.rotationSpeed *= ParticleUtils.DEG_TO_RADS;\n\t\t//set alpha to inital alpha\n\t\tthis.alpha = this.alphaList.current.value;\n\t\t//set scale to initial scale\n\t\tthis.scale.x = this.scale.y = this.scaleList.current.value;\n\t\t//figure out what we need to interpolate\n\t\tthis._doAlpha = !!this.alphaList.current.next;\n\t\tthis._doSpeed = !!this.speedList.current.next;\n\t\tthis._doScale = !!this.scaleList.current.next;\n\t\tthis._doColor = !!this.colorList.current.next;\n\t\tthis._doAcceleration = this.acceleration.x !== 0 || this.acceleration.y !== 0;\n\t\t//_doNormalMovement can be cancelled by subclasses\n\t\tthis._doNormalMovement = this._doSpeed || this.speedList.current.value !== 0 || this._doAcceleration;\n\t\t//save our lerp helper\n\t\tthis._oneOverLife = 1 / this.maxLife;\n\t\t//set the inital color\n\t\tlet color = this.colorList.current.value;\n\t\tthis.tint = ParticleUtils.combineRGBComponents(color.r, color.g, color.b);\n\t\t//ensure visibility\n\t\tthis.visible = true;\n\t}\n\n\t/**\n\t * Sets the texture for the particle. This can be overridden to allow\n\t * for an animated particle.\n\t * @param art The texture to set.\n\t */\n\tpublic applyArt(art: any)\n\t{\n\t\tthis.texture = art || Texture.EMPTY;\n\t}\n\n\t/**\n\t * Updates the particle.\n\t * @param delta Time elapsed since the previous frame, in __seconds__.\n\t * @return The standard interpolation multiplier (0-1) used for all\n\t *         relevant particle properties. A value of -1 means the particle\n\t *         died of old age instead.\n\t */\n\tpublic update(delta: number): number\n\t{\n\t\t//increase age\n\t\tthis.age += delta;\n\t\t//recycle particle if it is too old\n\t\tif(this.age >= this.maxLife || this.age < 0)\n\t\t{\n\t\t\tthis.kill();\n\t\t\treturn -1;\n\t\t}\n\n\t\t//determine our interpolation value\n\t\tlet lerp = this.age * this._oneOverLife;//lifetime / maxLife;\n\t\tif (this.ease)\n\t\t{\n\t\t\tif(this.ease.length == 4)\n\t\t\t{\n\t\t\t\t//the t, b, c, d parameters that some tween libraries use\n\t\t\t\t//(time, initial value, end value, duration)\n\t\t\t\tlerp = (this.ease as any)(lerp, 0, 1, 1);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t//the simplified version that we like that takes\n\t\t\t\t//one parameter, time from 0-1. TweenJS eases provide this usage.\n\t\t\t\tlerp = this.ease(lerp);\n\t\t\t}\n\t\t}\n\n\t\t//interpolate alpha\n\t\tif (this._doAlpha)\n\t\t\tthis.alpha = this.alphaList.interpolate(lerp);\n\t\t//interpolate scale\n\t\tif (this._doScale)\n\t\t{\n\t\t\tlet scale = this.scaleList.interpolate(lerp) * this.scaleMultiplier;\n\t\t\tthis.scale.x = this.scale.y = scale;\n\t\t}\n\t\t//handle movement\n\t\tif(this._doNormalMovement)\n\t\t{\n\t\t\t//interpolate speed\n\t\t\tif (this._doSpeed)\n\t\t\t{\n\t\t\t\tlet speed = this.speedList.interpolate(lerp) * this.speedMultiplier;\n\t\t\t\tParticleUtils.normalize(this.velocity);\n\t\t\t\tParticleUtils.scaleBy(this.velocity, speed);\n\t\t\t}\n\t\t\telse if(this._doAcceleration)\n\t\t\t{\n\t\t\t\tthis.velocity.x += this.acceleration.x * delta;\n\t\t\t\tthis.velocity.y += this.acceleration.y * delta;\n\t\t\t\tif (this.maxSpeed)\n\t\t\t\t{\n\t\t\t\t\tlet currentSpeed = ParticleUtils.length(this.velocity);\n\t\t\t\t\t//if we are going faster than we should, clamp at the max speed\n\t\t\t\t\t//DO NOT recalculate vector length\n\t\t\t\t\tif (currentSpeed > this.maxSpeed)\n\t\t\t\t\t{\n\t\t\t\t\t\tParticleUtils.scaleBy(this.velocity, this.maxSpeed / currentSpeed);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\t//adjust position based on velocity\n\t\t\tthis.position.x += this.velocity.x * delta;\n\t\t\tthis.position.y += this.velocity.y * delta;\n\t\t}\n\t\t//interpolate color\n\t\tif (this._doColor)\n\t\t{\n\t\t\tthis.tint = this.colorList.interpolate(lerp);\n\t\t}\n\t\t//update rotation\n\t\tif(this.rotationSpeed !== 0)\n\t\t{\n\t\t\tthis.rotation += this.rotationSpeed * delta;\n\t\t}\n\t\telse if(this.acceleration && !this.noRotation)\n\t\t{\n\t\t\tthis.rotation = Math.atan2(this.velocity.y, this.velocity.x);// + Math.PI / 2;\n\t\t}\n\t\treturn lerp;\n\t}\n\n\t/**\n\t * Kills the particle, removing it from the display list\n\t * and telling the emitter to recycle it.\n\t */\n\tpublic kill()\n\t{\n\t\tthis.emitter.recycle(this);\n\t}\n\n\t/**\n\t * Destroys the particle, removing references and preventing future use.\n\t */\n\tpublic destroy()\n\t{\n\t\tif (this.parent)\n\t\t\tthis.parent.removeChild(this);\n\t\tthis.Sprite_destroy();\n\t\tthis.emitter = this.velocity = this.colorList = this.scaleList = this.alphaList =\n\t\t\tthis.speedList = this.ease = this.next = this.prev = null;\n\t}\n\n\t/**\n\t * Checks over the art that was passed to the Emitter's init() function, to do any special\n\t * modifications to prepare it ahead of time.\n\t * @param art The array of art data. For Particle, it should be an array of\n\t *            Textures. Any strings in the array will be converted to\n\t *            Textures via Texture.from().\n\t * @return The art, after any needed modifications.\n\t */\n\tpublic static parseArt(art:any[]): any[]\n\t{\n\t\t//convert any strings to Textures.\n\t\tlet i;\n\t\tfor(i = art.length; i >= 0; --i)\n\t\t{\n\t\t\tif(typeof art[i] == \"string\")\n\t\t\t\tart[i] = Texture.fromImage(art[i]);\n\t\t}\n\t\t//particles from different base textures will be slower in WebGL than if they\n\t\t//were from one spritesheet\n\t\tif(ParticleUtils.verbose)\n\t\t{\n\t\t\tfor(i = art.length - 1; i > 0; --i)\n\t\t\t{\n\t\t\t\tif(art[i].baseTexture != art[i - 1].baseTexture)\n\t\t\t\t{\n\t\t\t\t\tif (window.console)\n\t\t\t\t\t\tconsole.warn(\"PixiParticles: using particle textures from different images may hinder performance in WebGL\");\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn art;\n\t}\n\n\t/**\n\t * Parses extra emitter data to ensure it is set up for this particle class.\n\t * Particle does nothing to the extra data.\n\t * @param extraData The extra data from the particle config.\n\t * @return The parsed extra data.\n\t */\n\tpublic static parseData(extraData: any): any\n\t{\n\t\treturn extraData;\n\t}\n}","import {ParticleUtils, Color, SimpleEase} from \"./ParticleUtils\";\nimport {Particle} from \"./Particle\";\nimport {PropertyNode} from \"./PropertyNode\";\nimport {PolygonalChain} from \"./PolygonalChain\";\nimport {Point, Circle, Rectangle, Container, settings} from 'pixi.js';\nimport * as pixi from 'pixi.js';\n// get the shared ticker, in V4 and V5 friendly methods\n/**\n * @hidden\n */\nlet ticker: pixi.ticker.Ticker;\n// to avoid Rollup transforming our import, save pixi namespace in a variable\nconst pixiNS = pixi;\nif (parseInt(/^(\\d+)\\./.exec(pixi.VERSION)[1]) < 5)\n{\n\tticker = pixiNS.ticker.shared;\n}\nelse\n{\n\tticker = (pixiNS as any).Ticker.shared;\n}\n\nexport interface ParticleConstructor\n{\n\tnew (emitter:Emitter):Particle;\n}\n\n/**\n * @hidden\n */\nconst helperPoint = new Point();\n\n/**\n * A particle emitter.\n */\nexport class Emitter\n{\n\t/**\n\t * The constructor used to create new particles. The default is\n\t * the built in particle class.\n\t */\n\tprotected _particleConstructor: typeof Particle;\n\t//properties for individual particles\n\t/**\n\t * An array of PIXI Texture objects.\n\t */\n\tpublic particleImages: any[];\n\t/**\n\t * The first node in the list of alpha values for all particles.\n\t */\n\tpublic startAlpha: PropertyNode<number>;\n\t/**\n\t * The first node in the list of speed values of all particles.\n\t */\n\tpublic startSpeed: PropertyNode<number>;\n\t/**\n\t * A minimum multiplier for the speed of a particle at all stages of its life. A value between\n\t * minimumSpeedMultiplier and 1 is randomly generated for each particle.\n\t */\n\tpublic minimumSpeedMultiplier: number;\n\t/**\n\t * Acceleration to apply to particles. Using this disables\n\t * any interpolation of particle speed. If the particles do\n\t * not have a rotation speed, then they will be rotated to\n\t * match the direction of travel.\n\t */\n\tpublic acceleration: Point;\n\t/**\n\t * The maximum speed allowed for accelerating particles. Negative values, values of 0 or NaN\n\t * will disable the maximum speed.\n\t */\n\tpublic maxSpeed: number;\n\t/**\n\t * The first node in the list of scale values of all particles.\n\t */\n\tpublic startScale: PropertyNode<number>;\n\t/**\n\t * A minimum multiplier for the scale of a particle at all stages of its life. A value between\n\t * minimumScaleMultiplier and 1 is randomly generated for each particle.\n\t */\n\tpublic minimumScaleMultiplier: number;\n\t/**\n\t * The first node in the list of  color values of all particles, as red, green, and blue\n\t * uints from 0-255.\n\t */\n\tpublic startColor: PropertyNode<Color>;\n\t/**\n\t * The minimum lifetime for a particle, in seconds.\n\t */\n\tpublic minLifetime: number;\n\t/**\n\t * The maximum lifetime for a particle, in seconds.\n\t */\n\tpublic maxLifetime: number;\n\t/**\n\t * The minimum start rotation for a particle, in degrees. This value\n\t * is ignored if the spawn type is \"burst\" or \"arc\".\n\t */\n\tpublic minStartRotation: number;\n\t/**\n\t * The maximum start rotation for a particle, in degrees. This value\n\t * is ignored if the spawn type is \"burst\" or \"arc\".\n\t */\n\tpublic maxStartRotation: number;\n\t/**\n\t * If no particle rotation should occur. Starting rotation will still\n\t * affect the direction in which particles move. If the rotation speed\n\t * is set, then this will be ignored.\n\t */\n\tpublic noRotation: boolean;\n\t/**\n\t * The minimum rotation speed for a particle, in degrees per second.\n\t * This only visually spins the particle, it does not change direction\n\t * of movement.\n\t */\n\tpublic minRotationSpeed: number;\n\t/**\n\t * The maximum rotation speed for a particle, in degrees per second.\n\t * This only visually spins the particle, it does not change direction\n\t * of movement.\n\t */\n\tpublic maxRotationSpeed: number;\n\t/**\n\t * The blend mode for all particles, as named by PIXI.blendModes.\n\t */\n\tpublic particleBlendMode: number;\n\t/**\n\t * An easing function for nonlinear interpolation of values. Accepts a single\n\t * parameter of time as a value from 0-1, inclusive. Expected outputs are values\n\t * from 0-1, inclusive.\n\t */\n\tpublic customEase: SimpleEase;\n\t/**\n\t *\tExtra data for use in custom particles. The emitter doesn't look inside, but\n\t *\tpasses it on to the particle to use in init().\n\t */\n\tpublic extraData: any;\n\t//properties for spawning particles\n\t/**\n\t * Time between particle spawns in seconds.\n\t */\n\tprotected _frequency: number;\n\t/**\n\t * Chance that a particle will be spawned on each opportunity to spawn one.\n\t * 0 is 0%, 1 is 100%.\n\t */\n\tpublic spawnChance: number;\n\t/**\n\t * Maximum number of particles to keep alive at a time. If this limit\n\t * is reached, no more particles will spawn until some have died.\n\t */\n\tpublic maxParticles: number;\n\t/**\n\t * The amount of time in seconds to emit for before setting emit to false.\n\t * A value of -1 is an unlimited amount of time.\n\t */\n\tpublic emitterLifetime: number;\n\t/**\n\t * Position at which to spawn particles, relative to the emitter's owner's origin.\n\t * For example, the flames of a rocket travelling right might have a spawnPos\n\t * of {x:-50, y:0}.\n\t * to spawn at the rear of the rocket.\n\t * To change this, use updateSpawnPos().\n\t */\n\tpublic spawnPos: Point;\n\t/**\n\t * How the particles will be spawned. Valid types are \"point\", \"rectangle\",\n\t * \"circle\", \"burst\", \"ring\".\n\t */\n\tpublic spawnType: string;\n\t/**\n\t * A reference to the emitter function specific to the spawn type.\n\t */\n\tprivate _spawnFunc: (p: Particle, emitPosX: number, emitPosY: number, i?: number) => void;\n\t/**\n\t * A rectangle relative to spawnPos to spawn particles inside if the spawn type is \"rect\".\n\t */\n\tpublic spawnRect: Rectangle;\n\t/**\n\t * A polygon relative to spawnPos to spawn particles on the chain if the spawn type is \"polygonalChain\".\n\t */\n\tpublic spawnPolygonalChain: PolygonalChain;\n\t/**\n\t * A circle relative to spawnPos to spawn particles inside if the spawn type is \"circle\".\n\t */\n\tpublic spawnCircle: Circle & {minRadius: number};\n\t/**\n\t * Number of particles to spawn time that the frequency allows for particles to spawn.\n\t */\n\tpublic particlesPerWave: number;\n\t/**\n\t * Spacing between particles in a burst. 0 gives a random angle for each particle.\n\t */\n\tpublic particleSpacing: number;\n\t/**\n\t * Angle at which to start spawning particles in a burst.\n\t */\n\tpublic angleStart: number;\n\t/**\n\t * Rotation of the emitter or emitter's owner in degrees. This is added to\n\t * the calculated spawn angle.\n\t * To change this, use rotate().\n\t */\n\tprotected rotation: number;\n\t/**\n\t * The world position of the emitter's owner, to add spawnPos to when\n\t * spawning particles. To change this, use updateOwnerPos().\n\t */\n\tprotected ownerPos: Point;\n\t/**\n\t * The origin + spawnPos in the previous update, so that the spawn position\n\t * can be interpolated to space out particles better.\n\t */\n\tprotected _prevEmitterPos: Point;\n\t/**\n\t * If _prevEmitterPos is valid, to prevent interpolation on the first update\n\t */\n\tprotected _prevPosIsValid: boolean;\n\t/**\n\t * If either ownerPos or spawnPos has changed since the previous update.\n\t */\n\tprotected _posChanged: boolean;\n\t/**\n\t * The container to add particles to.\n\t */\n\tprotected _parent: Container;\n\t/**\n\t * If particles should be added at the back of the display list instead of the front.\n\t */\n\tpublic addAtBack: boolean;\n\t/**\n\t * The current number of active particles.\n\t */\n\tpublic particleCount: number;\n\t/**\n\t * If particles should be emitted during update() calls. Setting this to false\n\t * stops new particles from being created, but allows existing ones to die out.\n\t */\n\tprotected _emit: boolean;\n\t/**\n\t * The timer for when to spawn particles in seconds, where numbers less\n\t * than 0 mean that particles should be spawned.\n\t */\n\tprotected _spawnTimer: number;\n\t/**\n\t * The life of the emitter in seconds.\n\t */\n\tprotected _emitterLife: number;\n\t/**\n\t * The particles that are active and on the display list. This is the first particle in a\n\t * linked list.\n\t */\n\tprotected _activeParticlesFirst: Particle;\n\t/**\n\t * The particles that are active and on the display list. This is the last particle in a\n\t * linked list.\n\t */\n\tprotected _activeParticlesLast: Particle;\n\t/**\n\t * The particles that are not currently being used. This is the first particle in a\n\t * linked list.\n\t */\n\tprotected _poolFirst: Particle;\n\t/**\n\t * The original config object that this emitter was initialized with.\n\t */\n\tprotected _origConfig: any;\n\t/**\n\t * The original particle image data that this emitter was initialized with.\n\t */\n\tprotected _origArt: any;\n\t/**\n\t * If the update function is called automatically from the shared ticker.\n\t * Setting this to false requires calling the update function manually.\n\t */\n\tprotected _autoUpdate: boolean;\n\t/**\n\t * If the emitter should destroy itself when all particles have died out. This is set by\n\t * playOnceAndDestroy();\n\t */\n\tprotected _destroyWhenComplete: boolean;\n\t/**\n\t * A callback for when all particles have died out. This is set by\n\t * playOnceAndDestroy() or playOnce();\n\t */\n\tprotected _completeCallback: () => void;\n\t\n\t/**\n\t * @param particleParent The container to add the particles to.\n\t * @param particleImages A texture or array of textures to use\n\t *                       for the particles. Strings will be turned\n\t *                       into textures via Texture.fromImage().\n\t * @param config A configuration object containing settings for the emitter.\n\t * @param config.emit If config.emit is explicitly passed as false, the\n\t *                    Emitter will start disabled.\n\t * @param config.autoUpdate If config.autoUpdate is explicitly passed as\n\t *                          true, the Emitter will automatically call\n\t *                          update via the PIXI shared ticker.\n\t */\n\tconstructor(particleParent: Container, particleImages: any, config: any)\n\t{\n\t\tthis._particleConstructor = Particle;\n\t\t//properties for individual particles\n\t\tthis.particleImages = null;\n\t\tthis.startAlpha = null;\n\t\tthis.startSpeed = null;\n\t\tthis.minimumSpeedMultiplier = 1;\n\t\tthis.acceleration = null;\n\t\tthis.maxSpeed = NaN;\n\t\tthis.startScale = null;\n\t\tthis.minimumScaleMultiplier = 1;\n\t\tthis.startColor = null;\n\t\tthis.minLifetime = 0;\n\t\tthis.maxLifetime = 0;\n\t\tthis.minStartRotation = 0;\n\t\tthis.maxStartRotation = 0;\n\t\tthis.noRotation = false;\n\t\tthis.minRotationSpeed = 0;\n\t\tthis.maxRotationSpeed = 0;\n\t\tthis.particleBlendMode = 0;\n\t\tthis.customEase = null;\n\t\tthis.extraData = null;\n\t\t//properties for spawning particles\n\t\tthis._frequency = 1;\n\t\tthis.spawnChance = 1;\n\t\tthis.maxParticles = 1000;\n\t\tthis.emitterLifetime = -1;\n\t\tthis.spawnPos = null;\n\t\tthis.spawnType = null;\n\t\tthis._spawnFunc = null;\n\t\tthis.spawnRect = null;\n\t\tthis.spawnCircle = null;\n\t\tthis.spawnPolygonalChain = null;\n\t\tthis.particlesPerWave = 1;\n\t\tthis.particleSpacing = 0;\n\t\tthis.angleStart = 0;\n\t\t//emitter properties\n\t\tthis.rotation = 0;\n\t\tthis.ownerPos = null;\n\t\tthis._prevEmitterPos = null;\n\t\tthis._prevPosIsValid = false;\n\t\tthis._posChanged = false;\n\t\tthis._parent = null;\n\t\tthis.addAtBack = false;\n\t\tthis.particleCount = 0;\n\t\tthis._emit = false;\n\t\tthis._spawnTimer = 0;\n\t\tthis._emitterLife = -1;\n\t\tthis._activeParticlesFirst = null;\n\t\tthis._activeParticlesLast = null;\n\t\tthis._poolFirst = null;\n\t\tthis._origConfig = null;\n\t\tthis._origArt = null;\n\t\tthis._autoUpdate = false;\n\t\tthis._destroyWhenComplete = false;\n\t\tthis._completeCallback = null;\n\n\t\t//set the initial parent\n\t\tthis.parent = particleParent;\n\n\t\tif(particleImages && config)\n\t\t\tthis.init(particleImages, config);\n\n\t\t//save often used functions on the instance instead of the prototype for better speed\n\t\tthis.recycle = this.recycle;\n\t\tthis.update = this.update;\n\t\tthis.rotate = this.rotate;\n\t\tthis.updateSpawnPos = this.updateSpawnPos;\n\t\tthis.updateOwnerPos = this.updateOwnerPos;\n\t}\n\n\t/**\n\t * Time between particle spawns in seconds. If this value is not a number greater than 0,\n\t * it will be set to 1 (particle per second) to prevent infinite loops.\n\t */\n\tpublic get frequency() { return this._frequency; }\n\tpublic set frequency(value)\n\t{\n\t\t//do some error checking to prevent infinite loops\n\t\tif(typeof value == \"number\" && value > 0)\n\t\t\tthis._frequency = value;\n\t\telse\n\t\t\tthis._frequency = 1;\n\t}\n\t/**\n\t * The constructor used to create new particles. The default is\n\t * the built in Particle class. Setting this will dump any active or\n\t * pooled particles, if the emitter has already been used.\n\t */\n\tpublic get particleConstructor() { return this._particleConstructor; }\n\tpublic set particleConstructor(value)\n\t{\n\t\tif(value != this._particleConstructor)\n\t\t{\n\t\t\tthis._particleConstructor = value;\n\t\t\t//clean up existing particles\n\t\t\tthis.cleanup();\n\t\t\t//scrap all the particles\n\t\t\tfor (let particle = this._poolFirst; particle; particle = particle.next)\n\t\t\t{\n\t\t\t\tparticle.destroy();\n\t\t\t}\n\t\t\tthis._poolFirst = null;\n\t\t\t//re-initialize the emitter so that the new constructor can do anything it needs to\n\t\t\tif(this._origConfig && this._origArt)\n\t\t\t\tthis.init(this._origArt, this._origConfig);\n\t\t}\n\t}\n\n\t/**\n\t* The container to add particles to. Settings this will dump any active particles.\n\t*/\n\tpublic get parent() { return this._parent; }\n\tpublic set parent(value)\n\t{\n\t\tthis.cleanup();\n\t\tthis._parent = value;\n\t}\n\n\t/**\n\t * Sets up the emitter based on the config settings.\n\t * @param art A texture or array of textures to use for the particles.\n\t * @param config A configuration object containing settings for the emitter.\n\t */\n\tpublic init(art: any, config: any)\n\t{\n\t\tif(!art || !config)\n\t\t\treturn;\n\t\t//clean up any existing particles\n\t\tthis.cleanup();\n\n\t\t//store the original config and particle images, in case we need to re-initialize\n\t\t//when the particle constructor is changed\n\t\tthis._origConfig = config;\n\t\tthis._origArt = art;\n\n\t\t//set up the array of data, also ensuring that it is an array\n\t\tart = Array.isArray(art) ? art.slice() : [art];\n\t\t//run the art through the particle class's parsing function\n\t\tconst partClass = this._particleConstructor;\n\t\tthis.particleImages = partClass.parseArt ? partClass.parseArt(art) : art;\n\t\t///////////////////////////\n\t\t// Particle Properties   //\n\t\t///////////////////////////\n\t\t//set up the alpha\n\t\tif (config.alpha)\n\t\t{\n\t\t\tthis.startAlpha = PropertyNode.createList(config.alpha);\n\t\t}\n\t\telse\n\t\t\tthis.startAlpha = new PropertyNode(1, 0);\n\t\t//set up the speed\n\t\tif (config.speed)\n\t\t{\n\t\t\tthis.startSpeed = PropertyNode.createList(config.speed);\n\t\t\tthis.minimumSpeedMultiplier = config.speed.minimumSpeedMultiplier || 1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.minimumSpeedMultiplier = 1;\n\t\t\tthis.startSpeed = new PropertyNode(0, 0);\n\t\t}\n\t\t//set up acceleration\n\t\tlet acceleration = config.acceleration;\n\t\tif(acceleration && (acceleration.x || acceleration.y))\n\t\t{\n\t\t\t//make sure we disable speed interpolation\n\t\t\tthis.startSpeed.next = null;\n\t\t\tthis.acceleration = new Point(acceleration.x, acceleration.y);\n\t\t\tthis.maxSpeed = config.maxSpeed || NaN;\n\t\t}\n\t\telse\n\t\t\tthis.acceleration = new Point();\n\t\t//set up the scale\n\t\tif (config.scale)\n\t\t{\n\t\t\tthis.startScale = PropertyNode.createList(config.scale);\n\t\t\tthis.minimumScaleMultiplier = config.scale.minimumScaleMultiplier || 1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.startScale = new PropertyNode(1, 0);\n\t\t\tthis.minimumScaleMultiplier = 1;\n\t\t}\n\t\t//set up the color\n\t\tif (config.color)\n\t\t{\n\t\t\tthis.startColor = PropertyNode.createList(config.color);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.startColor = new PropertyNode({r:0xFF, g:0xFF, b:0xFF}, 0);\n\t\t}\n\t\t//set up the start rotation\n\t\tif (config.startRotation)\n\t\t{\n\t\t\tthis.minStartRotation = config.startRotation.min;\n\t\t\tthis.maxStartRotation = config.startRotation.max;\n\t\t}\n\t\telse\n\t\t\tthis.minStartRotation = this.maxStartRotation = 0;\n\t\tif (config.noRotation &&\n\t\t\t(this.minStartRotation || this.maxStartRotation))\n\t\t{\n\t\t\tthis.noRotation = !!config.noRotation;\n\t\t}\n\t\telse\n\t\t\tthis.noRotation = false;\n\t\t//set up the rotation speed\n\t\tif (config.rotationSpeed)\n\t\t{\n\t\t\tthis.minRotationSpeed = config.rotationSpeed.min;\n\t\t\tthis.maxRotationSpeed = config.rotationSpeed.max;\n\t\t}\n\t\telse\n\t\t\tthis.minRotationSpeed = this.maxRotationSpeed = 0;\n\t\t//set up the lifetime\n\t\tthis.minLifetime = config.lifetime.min;\n\t\tthis.maxLifetime = config.lifetime.max;\n\t\t//get the blend mode\n\t\tthis.particleBlendMode = ParticleUtils.getBlendMode(config.blendMode);\n\t\t//use the custom ease if provided\n\t\tif (config.ease)\n\t\t{\n\t\t\tthis.customEase = typeof config.ease == \"function\" ?\n\t\t\t\tconfig.ease : ParticleUtils.generateEase(config.ease);\n\t\t}\n\t\telse\n\t\t\tthis.customEase = null;\n\t\t//set up the extra data, running it through the particle class's parseData function.\n\t\tif(partClass.parseData)\n\t\t\tthis.extraData = partClass.parseData(config.extraData);\n\t\telse\n\t\t\tthis.extraData = config.extraData || null;\n\t\t//////////////////////////\n\t\t// Emitter Properties   //\n\t\t//////////////////////////\n\t\t//reset spawn type specific settings\n\t\tthis.spawnRect = this.spawnCircle = null;\n\t\tthis.particlesPerWave = 1;\n\t\tif (config.particlesPerWave && config.particlesPerWave > 1)\n\t\t\tthis.particlesPerWave = config.particlesPerWave;\n\t\tthis.particleSpacing = 0;\n\t\tthis.angleStart = 0;\n\t\tlet spawnCircle;\n\t\t//determine the spawn function to use\n\t\tswitch(config.spawnType)\n\t\t{\n\t\t\tcase \"rect\":\n\t\t\t\tthis.spawnType = \"rect\";\n\t\t\t\tthis._spawnFunc = this._spawnRect;\n\t\t\t\tlet spawnRect = config.spawnRect;\n\t\t\t\tthis.spawnRect = new Rectangle(spawnRect.x, spawnRect.y, spawnRect.w, spawnRect.h);\n\t\t\t\tbreak;\n\t\t\tcase \"circle\":\n\t\t\t\tthis.spawnType = \"circle\";\n\t\t\t\tthis._spawnFunc = this._spawnCircle;\n\t\t\t\tspawnCircle = config.spawnCircle;\n\t\t\t\tthis.spawnCircle = new Circle(spawnCircle.x, spawnCircle.y, spawnCircle.r) as any;\n\t\t\t\tbreak;\n\t\t\tcase \"ring\":\n\t\t\t\tthis.spawnType = \"ring\";\n\t\t\t\tthis._spawnFunc = this._spawnRing;\n\t\t\t\tspawnCircle = config.spawnCircle;\n\t\t\t\tthis.spawnCircle = new Circle(spawnCircle.x, spawnCircle.y, spawnCircle.r) as any;\n\t\t\t\tthis.spawnCircle.minRadius = spawnCircle.minR;\n\t\t\t\tbreak;\n\t\t\tcase \"burst\":\n\t\t\t\tthis.spawnType = \"burst\";\n\t\t\t\tthis._spawnFunc = this._spawnBurst;\n\t\t\t\tthis.particleSpacing = config.particleSpacing;\n\t\t\t\tthis.angleStart = config.angleStart ? config.angleStart : 0;\n\t\t\t\tbreak;\n\t\t\tcase \"point\":\n\t\t\t\tthis.spawnType = \"point\";\n\t\t\t\tthis._spawnFunc = this._spawnPoint;\n\t\t\t\tbreak;\n\t\t\tcase \"polygonalChain\":\n\t\t\t\tthis.spawnType = \"polygonalChain\";\n\t\t\t\tthis._spawnFunc = this._spawnPolygonalChain;\n\t\t\t\tthis.spawnPolygonalChain = new PolygonalChain(config.spawnPolygon);\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tthis.spawnType = \"point\";\n\t\t\t\tthis._spawnFunc = this._spawnPoint;\n\t\t\t\tbreak;\n\t\t}\n\t\t//set the spawning frequency\n\t\tthis.frequency = config.frequency;\n\t\tthis.spawnChance = (typeof config.spawnChance === 'number' && config.spawnChance > 0) ? config.spawnChance : 1;\n\t\t//set the emitter lifetime\n\t\tthis.emitterLifetime = config.emitterLifetime || -1;\n\t\t//set the max particles\n\t\tthis.maxParticles = config.maxParticles > 0 ? config.maxParticles : 1000;\n\t\t//determine if we should add the particle at the back of the list or not\n\t\tthis.addAtBack = !!config.addAtBack;\n\t\t//reset the emitter position and rotation variables\n\t\tthis.rotation = 0;\n\t\tthis.ownerPos = new Point();\n\t\tthis.spawnPos = new Point(config.pos.x, config.pos.y);\n\t\tthis._prevEmitterPos = this.spawnPos.clone();\n\t\t//previous emitter position is invalid and should not be used for interpolation\n\t\tthis._prevPosIsValid = false;\n\t\t//start emitting\n\t\tthis._spawnTimer = 0;\n\t\tthis.emit = config.emit === undefined ? true : !!config.emit;\n\t\tthis.autoUpdate = config.autoUpdate === undefined ? false : !!config.autoUpdate;\n\t}\n\n\t/**\n\t * Recycles an individual particle. For internal use only.\n\t * @param particle The particle to recycle.\n\t * @internal\n\t */\n\tpublic recycle(particle: Particle)\n\t{\n\t\tif(particle.next)\n\t\t\tparticle.next.prev = particle.prev;\n\t\tif(particle.prev)\n\t\t\tparticle.prev.next = particle.next;\n\t\tif(particle == this._activeParticlesLast)\n\t\t\tthis._activeParticlesLast = particle.prev;\n\t\tif(particle == this._activeParticlesFirst)\n\t\t\tthis._activeParticlesFirst = particle.next;\n\t\t//add to pool\n\t\tparticle.prev = null;\n\t\tparticle.next = this._poolFirst;\n\t\tthis._poolFirst = particle;\n\t\t//remove child from display, or make it invisible if it is in a ParticleContainer\n\t\tif(particle.parent)\n\t\t\tparticle.parent.removeChild(particle);\n\t\t//decrease count\n\t\t--this.particleCount;\n\t}\n\n\t/**\n\t * Sets the rotation of the emitter to a new value.\n\t * @param newRot The new rotation, in degrees.\n\t */\n\tpublic rotate(newRot: number)\n\t{\n\t\tif (this.rotation == newRot) return;\n\t\t//caclulate the difference in rotation for rotating spawnPos\n\t\tlet diff = newRot - this.rotation;\n\t\tthis.rotation = newRot;\n\t\t//rotate spawnPos\n\t\tParticleUtils.rotatePoint(diff, this.spawnPos);\n\t\t//mark the position as having changed\n\t\tthis._posChanged = true;\n\t}\n\n\t/**\n\t * Changes the spawn position of the emitter.\n\t * @param x The new x value of the spawn position for the emitter.\n\t * @param y The new y value of the spawn position for the emitter.\n\t */\n\tpublic updateSpawnPos(x: number, y: number)\n\t{\n\t\tthis._posChanged = true;\n\t\tthis.spawnPos.x = x;\n\t\tthis.spawnPos.y = y;\n\t}\n\n\t/**\n\t * Changes the position of the emitter's owner. You should call this if you are adding\n\t * particles to the world container that your emitter's owner is moving around in.\n\t * @param x The new x value of the emitter's owner.\n\t * @param y The new y value of the emitter's owner.\n\t */\n\tpublic updateOwnerPos(x: number, y: number)\n\t{\n\t\tthis._posChanged = true;\n\t\tthis.ownerPos.x = x;\n\t\tthis.ownerPos.y = y;\n\t}\n\n\t/**\n\t * Prevents emitter position interpolation in the next update.\n\t * This should be used if you made a major position change of your emitter's owner\n\t * that was not normal movement.\n\t */\n\tpublic resetPositionTracking()\n\t{\n\t\tthis._prevPosIsValid = false;\n\t}\n\n\t/**\n\t * If particles should be emitted during update() calls. Setting this to false\n\t * stops new particles from being created, but allows existing ones to die out.\n\t */\n\tpublic get emit() { return this._emit; };\n\tpublic set emit(value)\n\t{\n\t\tthis._emit = !!value;\n\t\tthis._emitterLife = this.emitterLifetime;\n\t}\n\n\t/**\n\t * If the update function is called automatically from the shared ticker.\n\t * Setting this to false requires calling the update function manually.\n\t */\n\tpublic get autoUpdate() { return this._autoUpdate; }\n\tpublic set autoUpdate(value)\n\t{\n\t\tif (this._autoUpdate && !value)\n\t\t{\n\t\t\tticker.remove(this.update, this);\n\t\t}\n\t\telse if (!this._autoUpdate && value)\n\t\t{\n\t\t\tticker.add(this.update, this);\n\t\t}\n\t\tthis._autoUpdate = !!value;\n\t}\n\n\t/**\n\t * Starts emitting particles, sets autoUpdate to true, and sets up the Emitter to destroy itself\n\t * when particle emission is complete.\n\t * @param callback Callback for when emission is complete (all particles have died off)\n\t */\n\tpublic playOnceAndDestroy(callback?: () => void)\n\t{\n\t\tthis.autoUpdate = true;\n\t\tthis.emit = true;\n\t\tthis._destroyWhenComplete = true;\n\t\tthis._completeCallback = callback;\n\t}\n\n\t/**\n\t * Starts emitting particles and optionally calls a callback when particle emission is complete.\n\t * @param callback Callback for when emission is complete (all particles have died off)\n\t */\n\tpublic playOnce(callback?: () => void)\n\t{\n\t\tthis.emit = true;\n\t\tthis._completeCallback = callback;\n\t}\n\n\t/**\n\t * Updates all particles spawned by this emitter and emits new ones.\n\t * @param delta Time elapsed since the previous frame, in __seconds__.\n\t */\n\tpublic update(delta: number)\n\t{\n\t\tif (this._autoUpdate)\n\t\t{\n\t\t\tdelta = delta / settings.TARGET_FPMS / 1000;\n\t\t}\n\n\t\t//if we don't have a parent to add particles to, then don't do anything.\n\t\t//this also works as a isDestroyed check\n\t\tif (!this._parent) return;\n\t\t//update existing particles\n\t\tlet i, particle, next;\n\t\tfor (particle = this._activeParticlesFirst; particle; particle = next)\n\t\t{\n\t\t\tnext = particle.next;\n\t\t\tparticle.update(delta);\n\t\t}\n\t\tlet prevX, prevY;\n\t\t//if the previous position is valid, store these for later interpolation\n\t\tif(this._prevPosIsValid)\n\t\t{\n\t\t\tprevX = this._prevEmitterPos.x;\n\t\t\tprevY = this._prevEmitterPos.y;\n\t\t}\n\t\t//store current position of the emitter as local variables\n\t\tlet curX = this.ownerPos.x + this.spawnPos.x;\n\t\tlet curY = this.ownerPos.y + this.spawnPos.y;\n\t\t//spawn new particles\n\t\tif (this._emit)\n\t\t{\n\t\t\t//decrease spawn timer\n\t\t\tthis._spawnTimer -=  delta < 0 ? 0 : delta;\n\t\t\t//while _spawnTimer < 0, we have particles to spawn\n\t\t\twhile(this._spawnTimer <= 0)\n\t\t\t{\n\t\t\t\t//determine if the emitter should stop spawning\n\t\t\t\tif(this._emitterLife > 0)\n\t\t\t\t{\n\t\t\t\t\tthis._emitterLife -= this._frequency;\n\t\t\t\t\tif(this._emitterLife <= 0)\n\t\t\t\t\t{\n\t\t\t\t\t\tthis._spawnTimer = 0;\n\t\t\t\t\t\tthis._emitterLife = 0;\n\t\t\t\t\t\tthis.emit = false;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t//determine if we have hit the particle limit\n\t\t\t\tif(this.particleCount >= this.maxParticles)\n\t\t\t\t{\n\t\t\t\t\tthis._spawnTimer += this._frequency;\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\t//determine the particle lifetime\n\t\t\t\tlet lifetime;\n\t\t\t\tif (this.minLifetime == this.maxLifetime)\n\t\t\t\t\tlifetime = this.minLifetime;\n\t\t\t\telse\n\t\t\t\t\tlifetime = Math.random() * (this.maxLifetime - this.minLifetime) + this.minLifetime;\n\t\t\t\t//only make the particle if it wouldn't immediately destroy itself\n\t\t\t\tif(-this._spawnTimer < lifetime)\n\t\t\t\t{\n\t\t\t\t\t//If the position has changed and this isn't the first spawn,\n\t\t\t\t\t//interpolate the spawn position\n\t\t\t\t\tlet emitPosX, emitPosY;\n\t\t\t\t\tif (this._prevPosIsValid && this._posChanged)\n\t\t\t\t\t{\n\t\t\t\t\t\t//1 - _spawnTimer / delta, but _spawnTimer is negative\n\t\t\t\t\t\tlet lerp = 1 + this._spawnTimer / delta;\n\t\t\t\t\t\temitPosX = (curX - prevX) * lerp + prevX;\n\t\t\t\t\t\temitPosY = (curY - prevY) * lerp + prevY;\n\t\t\t\t\t}\n\t\t\t\t\telse//otherwise just set to the spawn position\n\t\t\t\t\t{\n\t\t\t\t\t\temitPosX = curX;\n\t\t\t\t\t\temitPosY = curY;\n\t\t\t\t\t}\n\t\t\t\t\t//create enough particles to fill the wave (non-burst types have a wave of 1)\n\t\t\t\t\ti = 0;\n\t\t\t\t\tfor(let len = Math.min(this.particlesPerWave, this.maxParticles - this.particleCount); i < len; ++i)\n\t\t\t\t\t{\n\t\t\t\t\t\t//see if we actually spawn one\n\t\t\t\t\t\tif (this.spawnChance < 1 && Math.random() >= this.spawnChance)\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t//create particle\n\t\t\t\t\t\tlet p;\n\t\t\t\t\t\tif(this._poolFirst)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tp = this._poolFirst;\n\t\t\t\t\t\t\tthis._poolFirst = this._poolFirst.next;\n\t\t\t\t\t\t\tp.next = null;\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tp = new this.particleConstructor(this);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t//set a random texture if we have more than one\n\t\t\t\t\t\tif(this.particleImages.length > 1)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tp.applyArt(this.particleImages[Math.floor(Math.random() * this.particleImages.length)]);\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t//if they are actually the same texture, a standard particle\n\t\t\t\t\t\t\t//will quit early from the texture setting in setTexture().\n\t\t\t\t\t\t\tp.applyArt(this.particleImages[0]);\n\t\t\t\t\t\t}\n\t\t\t\t\t\t//set up the start and end values\n\t\t\t\t\t\tp.alphaList.reset(this.startAlpha);\n\t\t\t\t\t\tif(this.minimumSpeedMultiplier != 1)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tp.speedMultiplier = Math.random() * (1 - this.minimumSpeedMultiplier) + this.minimumSpeedMultiplier;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tp.speedList.reset(this.startSpeed);\n\t\t\t\t\t\tp.acceleration.x = this.acceleration.x;\n\t\t\t\t\t\tp.acceleration.y = this.acceleration.y;\n\t\t\t\t\t\tp.maxSpeed = this.maxSpeed;\n\t\t\t\t\t\tif(this.minimumScaleMultiplier != 1)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tp.scaleMultiplier = Math.random() * (1 - this.minimumScaleMultiplier) + this.minimumScaleMultiplier;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tp.scaleList.reset(this.startScale);\n\t\t\t\t\t\tp.colorList.reset(this.startColor);\n\t\t\t\t\t\t//randomize the rotation speed\n\t\t\t\t\t\tif(this.minRotationSpeed == this.maxRotationSpeed)\n\t\t\t\t\t\t\tp.rotationSpeed = this.minRotationSpeed;\n\t\t\t\t\t\telse\n\t\t\t\t\t\t\tp.rotationSpeed = Math.random() * (this.maxRotationSpeed - this.minRotationSpeed) + this.minRotationSpeed;\n\t\t\t\t\t\tp.noRotation = this.noRotation;\n\t\t\t\t\t\t//set up the lifetime\n\t\t\t\t\t\tp.maxLife = lifetime;\n\t\t\t\t\t\t//set the blend mode\n\t\t\t\t\t\tp.blendMode = this.particleBlendMode;\n\t\t\t\t\t\t//set the custom ease, if any\n\t\t\t\t\t\tp.ease = this.customEase;\n\t\t\t\t\t\t//set the extra data, if any\n\t\t\t\t\t\tp.extraData = this.extraData;\n\t\t\t\t\t\t//call the proper function to handle rotation and position of particle\n\t\t\t\t\t\tthis._spawnFunc(p, emitPosX, emitPosY, i);\n\t\t\t\t\t\t//initialize particle\n\t\t\t\t\t\tp.init();\n\t\t\t\t\t\t//update the particle by the time passed, so the particles are spread out properly\n\t\t\t\t\t\tp.update(-this._spawnTimer);//we want a positive delta, because a negative delta messes things up\n\t\t\t\t\t\t//add the particle to the display list\n\t\t\t\t\t\tif(!p.parent)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tif (this.addAtBack)\n\t\t\t\t\t\t\t\tthis._parent.addChildAt(p, 0);\n\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\tthis._parent.addChild(p);\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t//kind of hacky, but performance friendly\n\t\t\t\t\t\t\t//shuffle children to correct place\n\t\t\t\t\t\t\tlet children = this._parent.children;\n\t\t\t\t\t\t\t//avoid using splice if possible\n\t\t\t\t\t\t\tif(children[0] == p)\n\t\t\t\t\t\t\t\tchildren.shift();\n\t\t\t\t\t\t\telse if(children[children.length-1] == p)\n\t\t\t\t\t\t\t\tchildren.pop();\n\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tlet index = children.indexOf(p);\n\t\t\t\t\t\t\t\tchildren.splice(index, 1);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif(this.addAtBack)\n\t\t\t\t\t\t\t\tchildren.unshift(p);\n\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\tchildren.push(p);\n\t\t\t\t\t\t}\n\t\t\t\t\t\t//add particle to list of active particles\n\t\t\t\t\t\tif(this._activeParticlesLast)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tthis._activeParticlesLast.next = p;\n\t\t\t\t\t\t\tp.prev = this._activeParticlesLast;\n\t\t\t\t\t\t\tthis._activeParticlesLast = p;\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tthis._activeParticlesLast = this._activeParticlesFirst = p;\n\t\t\t\t\t\t}\n\t\t\t\t\t\t++this.particleCount;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t//increase timer and continue on to any other particles that need to be created\n\t\t\t\tthis._spawnTimer += this._frequency;\n\t\t\t}\n\t\t}\n\t\t//if the position changed before this update, then keep track of that\n\t\tif(this._posChanged)\n\t\t{\n\t\t\tthis._prevEmitterPos.x = curX;\n\t\t\tthis._prevEmitterPos.y = curY;\n\t\t\tthis._prevPosIsValid = true;\n\t\t\tthis._posChanged = false;\n\t\t}\n\n\t\t//if we are all done and should destroy ourselves, take care of that\n\t\tif (!this._emit && !this._activeParticlesFirst)\n\t\t{\n\t\t\tif (this._completeCallback)\n\t\t\t{\n\t\t\t\tthis._completeCallback();\n\t\t\t}\n\t\t\tif (this._destroyWhenComplete)\n\t\t\t{\n\t\t\t\tthis.destroy();\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Positions a particle for a point type emitter.\n\t * @param p The particle to position and rotate.\n\t * @param emitPosX The emitter's x position\n\t * @param emitPosY The emitter's y position\n\t * @param i The particle number in the current wave. Not used for this function.\n\t */\n\tprotected _spawnPoint(p: Particle, emitPosX: number, emitPosY: number)\n\t{\n\t\t//set the initial rotation/direction of the particle based on\n\t\t//starting particle angle and rotation of emitter\n\t\tif (this.minStartRotation == this.maxStartRotation)\n\t\t\tp.rotation = this.minStartRotation + this.rotation;\n\t\telse\n\t\t\tp.rotation = Math.random() * (this.maxStartRotation - this.minStartRotation) + this.minStartRotation + this.rotation;\n\t\t//drop the particle at the emitter's position\n\t\tp.position.x = emitPosX;\n\t\tp.position.y = emitPosY;\n\t}\n\n\t/**\n\t * Positions a particle for a rectangle type emitter.\n\t * @param p The particle to position and rotate.\n\t * @param emitPosX The emitter's x position\n\t * @param emitPosY The emitter's y position\n\t * @param i The particle number in the current wave. Not used for this function.\n\t */\n\tprotected _spawnRect(p: Particle, emitPosX: number, emitPosY: number)\n\t{\n\t\t//set the initial rotation/direction of the particle based on starting\n\t\t//particle angle and rotation of emitter\n\t\tif (this.minStartRotation == this.maxStartRotation)\n\t\t\tp.rotation = this.minStartRotation + this.rotation;\n\t\telse\n\t\t\tp.rotation = Math.random() * (this.maxStartRotation - this.minStartRotation) + this.minStartRotation + this.rotation;\n\t\t//place the particle at a random point in the rectangle\n\t\thelperPoint.x = Math.random() * this.spawnRect.width + this.spawnRect.x;\n\t\thelperPoint.y = Math.random() * this.spawnRect.height + this.spawnRect.y;\n\t\tif(this.rotation !== 0)\n\t\t\tParticleUtils.rotatePoint(this.rotation, helperPoint);\n\t\tp.position.x = emitPosX + helperPoint.x;\n\t\tp.position.y = emitPosY + helperPoint.y;\n\t}\n\n\t/**\n\t * Positions a particle for a circle type emitter.\n\t * @param p The particle to position and rotate.\n\t * @param emitPosX The emitter's x position\n\t * @param emitPosY The emitter's y position\n\t * @param i The particle number in the current wave. Not used for this function.\n\t */\n\tprotected _spawnCircle(p: Particle, emitPosX: number, emitPosY: number)\n\t{\n\t\t//set the initial rotation/direction of the particle based on starting\n\t\t//particle angle and rotation of emitter\n\t\tif (this.minStartRotation == this.maxStartRotation)\n\t\t\tp.rotation = this.minStartRotation + this.rotation;\n\t\telse\n\t\t\tp.rotation = Math.random() * (this.maxStartRotation - this.minStartRotation) +\n\t\t\t\t\t\tthis.minStartRotation + this.rotation;\n\t\t//place the particle at a random radius in the circle\n\t\thelperPoint.x = Math.random() * this.spawnCircle.radius;\n\t\thelperPoint.y = 0;\n\t\t//rotate the point to a random angle in the circle\n\t\tParticleUtils.rotatePoint(Math.random() * 360, helperPoint);\n\t\t//offset by the circle's center\n\t\thelperPoint.x += this.spawnCircle.x;\n\t\thelperPoint.y += this.spawnCircle.y;\n\t\t//rotate the point by the emitter's rotation\n\t\tif(this.rotation !== 0)\n\t\t\tParticleUtils.rotatePoint(this.rotation, helperPoint);\n\t\t//set the position, offset by the emitter's position\n\t\tp.position.x = emitPosX + helperPoint.x;\n\t\tp.position.y = emitPosY + helperPoint.y;\n\t}\n\n\t/**\n\t * Positions a particle for a ring type emitter.\n\t * @param p The particle to position and rotate.\n\t * @param emitPosX The emitter's x position\n\t * @param emitPosY The emitter's y position\n\t * @param i The particle number in the current wave. Not used for this function.\n\t */\n\tprotected _spawnRing(p: Particle, emitPosX: number, emitPosY: number)\n\t{\n\t\tlet spawnCircle = this.spawnCircle;\n\t\t//set the initial rotation/direction of the particle based on starting\n\t\t//particle angle and rotation of emitter\n\t\tif (this.minStartRotation == this.maxStartRotation)\n\t\t\tp.rotation = this.minStartRotation + this.rotation;\n\t\telse\n\t\t\tp.rotation = Math.random() * (this.maxStartRotation - this.minStartRotation) +\n\t\t\t\t\t\tthis.minStartRotation + this.rotation;\n\t\t//place the particle at a random radius in the ring\n\t\tif(spawnCircle.minRadius !== spawnCircle.radius)\n\t\t{\n\t\t\thelperPoint.x = Math.random() * (spawnCircle.radius - spawnCircle.minRadius) +\n\t\t\t\t\t\t\tspawnCircle.minRadius;\n\t\t}\n\t\telse\n\t\t\thelperPoint.x = spawnCircle.radius;\n\t\thelperPoint.y = 0;\n\t\t//rotate the point to a random angle in the circle\n\t\tlet angle = Math.random() * 360;\n\t\tp.rotation += angle;\n\t\tParticleUtils.rotatePoint(angle, helperPoint);\n\t\t//offset by the circle's center\n\t\thelperPoint.x += this.spawnCircle.x;\n\t\thelperPoint.y += this.spawnCircle.y;\n\t\t//rotate the point by the emitter's rotation\n\t\tif(this.rotation !== 0)\n\t\t\tParticleUtils.rotatePoint(this.rotation, helperPoint);\n\t\t//set the position, offset by the emitter's position\n\t\tp.position.x = emitPosX + helperPoint.x;\n\t\tp.position.y = emitPosY + helperPoint.y;\n\t}\n\n\t/**\n\t * Positions a particle for polygonal chain.\n\t * @param p The particle to position and rotate.\n\t * @param emitPosX The emitter's x position\n\t * @param emitPosY The emitter's y position\n\t * @param i The particle number in the current wave. Not used for this function.\n\t */\n\tprotected _spawnPolygonalChain(p: Particle, emitPosX: number, emitPosY: number)\n\t{\n\t\t//set the initial rotation/direction of the particle based on starting\n\t\t//particle angle and rotation of emitter\n\t\tif (this.minStartRotation == this.maxStartRotation)\n\t\t\tp.rotation = this.minStartRotation + this.rotation;\n\t\telse\n\t\t\tp.rotation = Math.random() * (this.maxStartRotation - this.minStartRotation) +\n\t\t\t\tthis.minStartRotation + this.rotation;\n\t\t// get random point on the polygon chain\n\t\tthis.spawnPolygonalChain.getRandomPoint(helperPoint);\n\t\t//rotate the point by the emitter's rotation\n\t\tif(this.rotation !== 0)\n\t\t\tParticleUtils.rotatePoint(this.rotation, helperPoint);\n\t\t//set the position, offset by the emitter's position\n\t\tp.position.x = emitPosX + helperPoint.x;\n\t\tp.position.y = emitPosY + helperPoint.y;\n\t}\n\n\t/**\n\t * Positions a particle for a burst type emitter.\n\t * @param p The particle to position and rotate.\n\t * @param emitPosX The emitter's x position\n\t * @param emitPosY The emitter's y position\n\t * @param i The particle number in the current wave.\n\t */\n\tprotected _spawnBurst(p: Particle, emitPosX: number, emitPosY: number, i: number)\n\t{\n\t\t//set the initial rotation/direction of the particle based on spawn\n\t\t//angle and rotation of emitter\n\t\tif(this.particleSpacing === 0)\n\t\t\tp.rotation = Math.random() * 360;\n\t\telse\n\t\t\tp.rotation = this.angleStart + (this.particleSpacing * i) + this.rotation;\n\t\t//drop the particle at the emitter's position\n\t\tp.position.x = emitPosX;\n\t\tp.position.y = emitPosY;\n\t}\n\n\t/**\n\t * Kills all active particles immediately.\n\t */\n\tpublic cleanup()\n\t{\n\t\tlet particle, next;\n\t\tfor (particle = this._activeParticlesFirst; particle; particle = next)\n\t\t{\n\t\t\tnext = particle.next;\n\t\t\tthis.recycle(particle);\n\t\t\tif(particle.parent)\n\t\t\t\tparticle.parent.removeChild(particle);\n\t\t}\n\t\tthis._activeParticlesFirst = this._activeParticlesLast = null;\n\t\tthis.particleCount = 0;\n\t}\n\n\t/**\n\t * Destroys the emitter and all of its particles.\n\t */\n\tpublic destroy()\n\t{\n\t\t//make sure we aren't still listening to any tickers\n\t\tthis.autoUpdate = false;\n\t\t//puts all active particles in the pool, and removes them from the particle parent\n\t\tthis.cleanup();\n\t\t//wipe the pool clean\n\t\tlet next;\n\t\tfor (let particle = this._poolFirst; particle; particle = next)\n\t\t{\n\t\t\t//store next value so we don't lose it in our destroy call\n\t\t\tnext = particle.next;\n\t\t\tparticle.destroy();\n\t\t}\n\t\tthis._poolFirst = this._parent = this.particleImages = this.spawnPos = this.ownerPos =\n\t\t\tthis.startColor = this.startScale = this.startAlpha = this.startSpeed =\n\t\t\tthis.customEase = this._completeCallback = null;\n\t}\n}\n","import {Point} from 'pixi.js';\n\nexport interface BasicPoint\n{\n\tx: number;\n\ty: number;\n}\n\nexport interface Segment\n{\n\tp1: BasicPoint;\n\tp2: BasicPoint;\n\tl: number;\n}\n\n/**\n * Chain of line segments for generating spawn positions.\n */\nexport class PolygonalChain\n{\n\t/**\n\t * List of segment objects in the chain.\n\t */\n\tprivate segments:Segment[];\n\t/**\n\t * Total length of all segments of the chain.\n\t */\n\tprivate totalLength:number;\n\t/**\n\t * Total length of segments up to and including the segment of the same index.\n\t * Used for weighted random selection of segment.\n\t */\n\tprivate countingLengths:number[];\n\t\n\t/**\n\t * @param data Point data for polygon chains. Either a list of points for a single chain, or a list of chains.\n\t */\n\tconstructor(data:BasicPoint[]|BasicPoint[][])\n\t{\n\t\tthis.segments = [];\n\t\tthis.countingLengths = [];\n\t\tthis.totalLength = 0;\n\t\tthis.init(data);\n\t}\n\t\n\t/**\n\t * @param data Point data for polygon chains. Either a list of points for a single chain, or a list of chains.\n\t */\n\tprivate init(data:BasicPoint[]|BasicPoint[][])\n\t{\n\t\t// if data is not present, set up a segment of length 0\n\t\tif (!data || !data.length)\n\t\t{\n\t\t\tthis.segments.push({p1:{x:0, y:0}, p2:{x:0, y:0}, l:0});\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif (Array.isArray(data[0]))\n\t\t\t{\n\t\t\t\t// list of segment chains, each defined as a list of points\n\t\t\t\tfor (let i = 0; i < data.length; ++i)\n\t\t\t\t{\n\t\t\t\t\t// loop through the chain, connecting points\n\t\t\t\t\tconst chain = data[i] as BasicPoint[];\n\t\t\t\t\tlet prevPoint = chain[0] as BasicPoint;\n\t\t\t\t\tfor (let j = 1; j < chain.length; ++j)\n\t\t\t\t\t{\n\t\t\t\t\t\tconst second = chain[j] as BasicPoint;\n\t\t\t\t\t\tthis.segments.push({p1: prevPoint, p2: second, l:0});\n\t\t\t\t\t\tprevPoint = second;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tlet prevPoint = data[0] as BasicPoint;\n\t\t\t\t// list of points\n\t\t\t\tfor (let i = 1; i < data.length; ++i)\n\t\t\t\t{\n\t\t\t\t\tconst second = data[i] as BasicPoint;\n\t\t\t\t\tthis.segments.push({p1: prevPoint, p2: second, l:0});\n\t\t\t\t\tprevPoint = second;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t// now go through our segments to calculate the lengths so that we\n\t\t// can set up a nice weighted random distribution\n\t\tfor (let i = 0; i < this.segments.length; ++i) {\n\t\t\tconst {p1, p2} = this.segments[i];\n\t\t\tconst segLength = Math.sqrt((p2.x - p1.x) * (p2.x - p1.x) + (p2.y - p1.y) * (p2.y - p1.y));\n\t\t\t// save length so we can turn a random number into a 0-1 interpolation value later\n\t\t\tthis.segments[i].l = segLength;\n\t\t\tthis.totalLength += segLength;\n\t\t\t// keep track of the length so far, counting up\n\t\t\tthis.countingLengths.push(this.totalLength);\n\t\t}\n\t}\n\t\n\t/**\n\t * Gets a random point in the chain.\n\t * @param out The point to store the selected position in.\n\t */\n\tpublic getRandomPoint(out:Point)\n\t{\n\t\t// select a random spot in the length of the chain\n\t\tconst rand = Math.random() * this.totalLength;\n\t\tlet chosenSeg:Segment;\n\t\tlet lerp:number;\n\t\t// if only one segment, it wins\n\t\tif (this.segments.length === 1)\n\t\t{\n\t\t\tchosenSeg = this.segments[0];\n\t\t\tlerp = rand;\n\t\t}\n\t\telse\n\t\t{\n\t\t\t// otherwise, go through countingLengths until we have determined\n\t\t\t// which segment we chose\n\t\t\tfor (let i = 0; i < this.countingLengths.length; ++i) {\n\t\t\t\tif (rand < this.countingLengths[i])\n\t\t\t\t{\n\t\t\t\t\tchosenSeg = this.segments[i];\n\t\t\t\t\t// set lerp equal to the length into that segment (i.e. the remainder after subtracting all the segments before it)\n\t\t\t\t\tlerp = i === 0 ? rand : rand - this.countingLengths[i - 1];\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t// divide lerp by the segment length, to result in a 0-1 number.\n\t\tlerp /= chosenSeg.l || 1;\n\t\tconst {p1, p2} = chosenSeg;\n\t\t// now calculate the position in the segment that the lerp value represents\n\t\tout.x = p1.x + lerp * (p2.x - p1.x);\n\t\tout.y = p1.y + lerp * (p2.y - p1.y);\n\t}\n}","import {ParticleUtils} from \"./ParticleUtils\";\nimport {Particle} from \"./Particle\";\nimport {Emitter} from \"./Emitter\";\nimport {Point, Texture} from 'pixi.js';\n\n/**\n * A helper point for math things.\n * @hidden\n */\nconst helperPoint = new Point();\n\n/**\n * A hand picked list of Math functions (and a couple properties) that are\n * allowable. They should be used without the preceding \"Math.\"\n * @hidden\n */\nconst MATH_FUNCS =\n[\n\t\"pow\",\n\t\"sqrt\",\n\t\"abs\",\n\t\"floor\",\n\t\"round\",\n\t\"ceil\",\n\t\"E\",\n\t\"PI\",\n\t\"sin\",\n\t\"cos\",\n\t\"tan\",\n\t\"asin\",\n\t\"acos\",\n\t\"atan\",\n\t\"atan2\",\n\t\"log\"\n];\n/**\n * create an actual regular expression object from the string\n * @hidden\n */\nconst WHITELISTER = new RegExp(\n\t[\n\t\t//Allow the 4 basic operations, parentheses and all numbers/decimals, as well\n\t\t//as 'x', for the variable usage.\n\t\t\"[01234567890\\\\.\\\\*\\\\-\\\\+\\\\/\\\\(\\\\)x ,]\",\n\t].concat(MATH_FUNCS).join(\"|\"),\n\t\"g\"\n);\n\n/**\n * Parses a string into a function for path following.\n * This involves whitelisting the string for safety, inserting \"Math.\" to math function\n * names, and using `new Function()` to generate a function.\n * @hidden\n * @param pathString The string to parse.\n * @return The path function - takes x, outputs y.\n */\nconst parsePath = function(pathString: string)\n{\n\tlet matches = pathString.match(WHITELISTER);\n\tfor(let i = matches.length - 1; i >= 0; --i)\n\t{\n\t\tif(MATH_FUNCS.indexOf(matches[i]) >= 0)\n\t\t\tmatches[i] = \"Math.\" + matches[i];\n\t}\n\tpathString = matches.join(\"\");\n\treturn new Function(\"x\", \"return \"+ pathString + \";\");\n};\n\n/**\n * An particle that follows a path defined by an algebraic expression, e.g. \"sin(x)\" or\n * \"5x + 3\".\n * To use this class, the particle config must have a \"path\" string in the\n * \"extraData\" parameter. This string should have \"x\" in it to represent movement (from the\n * speed settings of the particle). It may have numbers, parentheses, the four basic\n * operations, and the following Math functions or properties (without the preceding \"Math.\"):\n * \"pow\", \"sqrt\", \"abs\", \"floor\", \"round\", \"ceil\", \"E\", \"PI\", \"sin\", \"cos\", \"tan\", \"asin\",\n * \"acos\", \"atan\", \"atan2\", \"log\".\n * The overall movement of the particle and the expression value become x and y positions for\n * the particle, respectively. The final position is rotated by the spawn rotation/angle of\n * the particle.\n *\n * Some example paths:\n *\n * \t\"sin(x/10) * 20\" // A sine wave path.\n * \t\"cos(x/100) * 30\" // Particles curve counterclockwise (for medium speed/low lifetime particles)\n * \t\"pow(x/10, 2) / 2\" // Particles curve clockwise (remember, +y is down).\n */\nexport class PathParticle extends Particle\n{\n\t/**\n\t * The function representing the path the particle should take.\n\t */\n\tpublic path: Function;\n\t/**\n\t * The initial rotation in degrees of the particle, because the direction of the path\n\t * is based on that.\n\t */\n\tpublic initialRotation: number;\n\t/**\n\t * The initial position of the particle, as all path movement is added to that.\n\t */\n\tpublic initialPosition: Point;\n\t/**\n\t * Total single directional movement, due to speed.\n\t */\n\tpublic movement: number;\n\t\n\t/**\n\t * @param {PIXI.particles.Emitter} emitter The emitter that controls this PathParticle.\n\t */\n\tconstructor(emitter: Emitter)\n\t{\n\t\tsuper(emitter);\n\t\tthis.path = null;\n\t\tthis.initialRotation = 0;\n\t\tthis.initialPosition = new Point();\n\t\tthis.movement = 0;\n\t}\n\n\t/**\n\t * Initializes the particle for use, based on the properties that have to\n\t * have been set already on the particle.\n\t */\n\tpublic init()\n\t{\n\t\t//get initial rotation before it is converted to radians\n\t\tthis.initialRotation = this.rotation;\n\t\t//standard init\n\t\tthis.Particle_init();\n\n\t\t//set the path for the particle\n\t\tthis.path = this.extraData.path;\n\t\t//cancel the normal movement behavior\n\t\tthis._doNormalMovement = !this.path;\n\t\t//reset movement\n\t\tthis.movement = 0;\n\t\t//grab position\n\t\tthis.initialPosition.x = this.position.x;\n\t\tthis.initialPosition.y = this.position.y;\n\t}\n\n\t/**\n\t * Updates the particle.\n\t * @param delta Time elapsed since the previous frame, in __seconds__.\n\t */\n\tpublic update(delta: number): number\n\t{\n\t\tconst lerp = this.Particle_update(delta);\n\t\t//if the particle died during the update, then don't bother\n\t\tif(lerp >= 0 && this.path)\n\t\t{\n\t\t\t//increase linear movement based on speed\n\t\t\tconst speed = this.speedList.interpolate(lerp) * this.speedMultiplier;\n\t\t\tthis.movement += speed * delta;\n\t\t\t//set up the helper point for rotation\n\t\t\thelperPoint.x = this.movement;\n\t\t\thelperPoint.y = this.path(this.movement);\n\t\t\tParticleUtils.rotatePoint(this.initialRotation, helperPoint);\n\t\t\tthis.position.x = this.initialPosition.x + helperPoint.x;\n\t\t\tthis.position.y = this.initialPosition.y + helperPoint.y;\n\t\t}\n\t\treturn lerp;\n\t}\n\t\n\t/**\n\t * Destroys the particle, removing references and preventing future use.\n\t */\n\tpublic destroy()\n\t{\n\t\tthis.Particle_destroy();\n\t\tthis.path = this.initialPosition = null;\n\t}\n\n\t/**\n\t * Checks over the art that was passed to the Emitter's init() function, to do any special\n\t * modifications to prepare it ahead of time. This just runs Particle.parseArt().\n\t * @param art The array of art data. For Particle, it should be an array of\n\t *            Textures. Any strings in the array will be converted to\n\t *            Textures via Texture.fromImage().\n\t * @return The art, after any needed modifications.\n\t */\n\tpublic static parseArt(art: (Texture|string)[]):Texture[]\n\t{\n\t\treturn Particle.parseArt(art);\n\t}\n\n\t/**\n\t * Parses extra emitter data to ensure it is set up for this particle class.\n\t * PathParticle checks for the existence of path data, and parses the path data for use\n\t * by particle instances.\n\t * @param extraData The extra data from the particle config.\n\t * @return The parsed extra data.\n\t */\n\tpublic static parseData(extraData: {path:string})\n\t{\n\t\tlet output: any = {};\n\t\tif(extraData && extraData.path)\n\t\t{\n\t\t\ttry\n\t\t\t{\n\t\t\t\toutput.path = parsePath(extraData.path);\n\t\t\t}\n\t\t\tcatch(e)\n\t\t\t{\n\t\t\t\tif(ParticleUtils.verbose)\n\t\t\t\t\tconsole.error(\"PathParticle: error in parsing path expression\");\n\t\t\t\toutput.path = null;\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(ParticleUtils.verbose)\n\t\t\t\tconsole.error(\"PathParticle requires a path string in extraData!\");\n\t\t\toutput.path = null;\n\t\t}\n\t\treturn output;\n\t}\n}","import {Particle} from \"./Particle\";\nimport {Emitter} from \"./Emitter\";\nimport {Texture} from 'pixi.js';\n\nexport interface ParsedAnimatedParticleArt\n{\n\ttextures: Texture[];\n\tduration: number;\n\tframerate: number;\n\tloop: boolean;\n}\n\nexport interface AnimatedParticleArt\n{\n\tframerate: \"matchLife\"|number;\n\tloop?: boolean;\n\ttextures: (string|Texture|{texture:string|Texture,count:number})[];\n}\n\n/**\n * An individual particle image with an animation. Art data passed to the emitter must be\n * formatted in a particular way for AnimatedParticle to be able to handle it:\n *\n * ```typescript\n * {\n *     //framerate is required. It is the animation speed of the particle in frames per\n *     //second.\n *     //A value of \"matchLife\" causes the animation to match the lifetime of an individual\n *     //particle, instead of at a constant framerate. This causes the animation to play\n *     //through one time, completing when the particle expires.\n *     framerate: 6,\n *     //loop is optional, and defaults to false.\n *     loop: true,\n *     //textures is required, and can be an array of any (non-zero) length.\n *     textures: [\n *         //each entry represents a single texture that should be used for one or more\n *         //frames. Any strings will be converted to Textures with Texture.fromImage().\n *         //Instances of PIXI.Texture will be used directly.\n *         \"animFrame1.png\",\n *         //entries can be an object with a 'count' property, telling AnimatedParticle to\n *         //use that texture for 'count' frames sequentially.\n *         {\n *             texture: \"animFrame2.png\",\n *             count: 3\n *         },\n *         \"animFrame3.png\"\n *     ]\n * }\n * ```\n */\nexport class AnimatedParticle extends Particle\n{\n\t/**\n\t * Texture array used as each frame of animation, similarly to how MovieClip works.\n\t */\n\tprivate textures: Texture[];\n\n\t/**\n\t * Duration of the animation, in seconds.\n\t */\n\tprivate duration: number;\n\n\t/**\n\t * Animation framerate, in frames per second.\n\t */\n\tprivate framerate: number;\n\n\t/**\n\t * Animation time elapsed, in seconds.\n\t */\n\tprivate elapsed: number;\n\n\t/**\n\t * If this particle animation should loop.\n\t */\n\tprivate loop: boolean;\n\t\n\t/**\n\t * @param emitter The emitter that controls this AnimatedParticle.\n\t */\n\tconstructor(emitter: Emitter)\n\t{\n\t\tsuper(emitter);\n\n\t\tthis.textures = null;\n\t\tthis.duration = 0;\n\t\tthis.framerate = 0;\n\t\tthis.elapsed = 0;\n\t\tthis.loop = false;\n\t}\n\n\t/**\n\t * Initializes the particle for use, based on the properties that have to\n\t * have been set already on the particle.\n\t */\n\tpublic init()\n\t{\n\t\tthis.Particle_init();\n\n\t\tthis.elapsed = 0;\n\n\t\t//if the animation needs to match the particle's life, then cacluate variables\n\t\tif(this.framerate < 0)\n\t\t{\n\t\t\tthis.duration = this.maxLife;\n\t\t\tthis.framerate = this.textures.length / this.duration;\n\t\t}\n\t}\n\n\t/**\n\t * Sets the textures for the particle.\n\t * @param art An array of PIXI.Texture objects for this animated particle.\n\t */\n\tpublic applyArt(art: ParsedAnimatedParticleArt)\n\t{\n\t\tthis.textures = art.textures;\n\t\tthis.framerate = art.framerate;\n\t\tthis.duration = art.duration;\n\t\tthis.loop = art.loop;\n\t}\n\n\t/**\n\t * Updates the particle.\n\t * @param delta Time elapsed since the previous frame, in __seconds__.\n\t */\n\tpublic update(delta: number): number\n\t{\n\t\tconst lerp = this.Particle_update(delta);\n\t\t//only animate the particle if it is still alive\n\t\tif(lerp >= 0)\n\t\t{\n\t\t\tthis.elapsed += delta;\n\t\t\tif(this.elapsed > this.duration)\n\t\t\t{\n\t\t\t\t//loop elapsed back around\n\t\t\t\tif(this.loop)\n\t\t\t\t\tthis.elapsed = this.elapsed % this.duration;\n\t\t\t\t//subtract a small amount to prevent attempting to go past the end of the animation\n\t\t\t\telse\n\t\t\t\t\tthis.elapsed = this.duration - 0.000001;\n\t\t\t}\n\t\t\tlet frame = (this.elapsed * this.framerate + 0.0000001) | 0;\n\t\t\tthis.texture = this.textures[frame] || Texture.EMPTY;\n\t\t}\n\t\treturn lerp;\n\t}\n\n\t/**\n\t * Destroys the particle, removing references and preventing future use.\n\t */\n\tpublic destroy()\n\t{\n\t\tthis.Particle_destroy();\n\t\tthis.textures = null;\n\t}\n\n\t/**\n\t * Checks over the art that was passed to the Emitter's init() function, to do any special\n\t * modifications to prepare it ahead of time.\n\t * @param art The array of art data, properly formatted for AnimatedParticle.\n\t * @return The art, after any needed modifications.\n\t */\n\tpublic static parseArt(art: AnimatedParticleArt[])\n\t{\n\t\tlet data, output: any, textures, tex, outTextures;\n\t\tlet outArr:ParsedAnimatedParticleArt[] = [];\n\t\tfor(let i = 0; i < art.length; ++i)\n\t\t{\n\t\t\tdata = art[i];\n\t\t\toutArr[i] = output = {} as ParsedAnimatedParticleArt;\n\t\t\toutput.textures = outTextures = [];\n\t\t\ttextures = data.textures;\n\t\t\tfor(let j = 0; j < textures.length; ++j)\n\t\t\t{\n\t\t\t\ttex = textures[j];\n\t\t\t\tif(typeof tex == \"string\")\n\t\t\t\t\toutTextures.push(Texture.fromImage(tex));\n\t\t\t\telse if(tex instanceof Texture)\n\t\t\t\t\toutTextures.push(tex);\n\t\t\t\t//assume an object with extra data determining duplicate frame data\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tlet dupe = tex.count || 1;\n\t\t\t\t\tif(typeof tex.texture == \"string\")\n\t\t\t\t\t\ttex = Texture.fromImage(tex.texture);\n\t\t\t\t\telse// if(tex.texture instanceof Texture)\n\t\t\t\t\t\ttex = tex.texture;\n\t\t\t\t\tfor(; dupe > 0; --dupe)\n\t\t\t\t\t{\n\t\t\t\t\t\toutTextures.push(tex);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t//use these values to signify that the animation should match the particle life time.\n\t\t\tif(data.framerate == \"matchLife\")\n\t\t\t{\n\t\t\t\t//-1 means that it should be calculated\n\t\t\t\toutput.framerate = -1;\n\t\t\t\toutput.duration = 0;\n\t\t\t\toutput.loop = false;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t//determine if the animation should loop\n\t\t\t\toutput.loop = !!data.loop;\n\t\t\t\t//get the framerate, default to 60\n\t\t\t\toutput.framerate = data.framerate > 0 ? data.framerate : 60;\n\t\t\t\t//determine the duration\n\t\t\t\toutput.duration = outTextures.length / output.framerate;\n\t\t\t}\n\t\t}\n\n\t\treturn outArr;\n\t}\n}"]}